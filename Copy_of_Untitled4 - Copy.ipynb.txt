{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "h3ymjaCUctdp",
    "outputId": "eb807dbc-4e44-400c-85de-ec3873b827e3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting spacy\n",
      "  Downloading spacy-3.8.2.tar.gz (1.3 MB)\n",
      "     ---------------------------------------- 0.0/1.3 MB ? eta -:--:--\n",
      "     -------------------------------- ------- 1.0/1.3 MB 6.6 MB/s eta 0:00:01\n",
      "     -------------------------------- ------- 1.0/1.3 MB 6.6 MB/s eta 0:00:01\n",
      "     -------------------------------- ------- 1.0/1.3 MB 6.6 MB/s eta 0:00:01\n",
      "     ---------------------------------------- 1.3/1.3 MB 1.5 MB/s eta 0:00:00\n",
      "  Installing build dependencies: started\n",
      "  Installing build dependencies: still running...\n",
      "  Installing build dependencies: still running...\n",
      "  Installing build dependencies: finished with status 'error'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  error: subprocess-exited-with-error\n",
      "  \n",
      "  × pip subprocess to install build dependencies did not run successfully.\n",
      "  │ exit code: 1\n",
      "  ╰─> [114 lines of output]\n",
      "      Ignoring numpy: markers 'python_version < \"3.9\"' don't match your environment\n",
      "      Collecting setuptools\n",
      "        Downloading setuptools-75.5.0-py3-none-any.whl.metadata (6.8 kB)\n",
      "      Collecting cython<3.0,>=0.25\n",
      "        Downloading Cython-0.29.37-py2.py3-none-any.whl.metadata (3.1 kB)\n",
      "      Collecting cymem<2.1.0,>=2.0.2\n",
      "        Downloading cymem-2.0.8.tar.gz (9.8 kB)\n",
      "        Installing build dependencies: started\n",
      "        Installing build dependencies: finished with status 'done'\n",
      "        Getting requirements to build wheel: started\n",
      "        Getting requirements to build wheel: finished with status 'done'\n",
      "        Preparing metadata (pyproject.toml): started\n",
      "        Preparing metadata (pyproject.toml): finished with status 'done'\n",
      "      Collecting preshed<3.1.0,>=3.0.2\n",
      "        Downloading preshed-3.0.9.tar.gz (14 kB)\n",
      "        Installing build dependencies: started\n",
      "        Installing build dependencies: still running...\n",
      "        Installing build dependencies: finished with status 'error'\n",
      "        error: subprocess-exited-with-error\n",
      "      \n",
      "        Ã— pip subprocess to install build dependencies did not run successfully.\n",
      "        â”‚ exit code: 1\n",
      "        â•°â”€> [81 lines of output]\n",
      "            Collecting setuptools\n",
      "              Using cached setuptools-75.5.0-py3-none-any.whl.metadata (6.8 kB)\n",
      "            Collecting cython>=0.28\n",
      "              Using cached Cython-3.0.11-cp313-cp313-win_amd64.whl.metadata (3.2 kB)\n",
      "            Collecting cymem<2.1.0,>=2.0.2\n",
      "              Using cached cymem-2.0.8.tar.gz (9.8 kB)\n",
      "              Installing build dependencies: started\n",
      "              Installing build dependencies: finished with status 'done'\n",
      "              Getting requirements to build wheel: started\n",
      "              Getting requirements to build wheel: finished with status 'done'\n",
      "              Preparing metadata (pyproject.toml): started\n",
      "              Preparing metadata (pyproject.toml): finished with status 'done'\n",
      "            Collecting murmurhash<1.1.0,>=0.28.0\n",
      "              Downloading murmurhash-1.0.10.tar.gz (12 kB)\n",
      "              Installing build dependencies: started\n",
      "              Installing build dependencies: finished with status 'done'\n",
      "              Getting requirements to build wheel: started\n",
      "              Getting requirements to build wheel: finished with status 'done'\n",
      "              Preparing metadata (pyproject.toml): started\n",
      "              Preparing metadata (pyproject.toml): finished with status 'done'\n",
      "            Using cached setuptools-75.5.0-py3-none-any.whl (1.2 MB)\n",
      "            Using cached Cython-3.0.11-cp313-cp313-win_amd64.whl (2.8 MB)\n",
      "            Building wheels for collected packages: cymem, murmurhash\n",
      "              Building wheel for cymem (pyproject.toml): started\n",
      "              Building wheel for cymem (pyproject.toml): finished with status 'error'\n",
      "              error: subprocess-exited-with-error\n",
      "      \n",
      "              Ãƒâ€” Building wheel for cymem (pyproject.toml) did not run successfully.\n",
      "              Ã¢â€\\x9dâ€š exit code: 1\n",
      "              Ã¢â€¢Â°Ã¢â€\\x9dâ‚¬> [15 lines of output]\n",
      "                  running bdist_wheel\n",
      "                  running build\n",
      "                  running build_py\n",
      "                  creating build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  copying cymem\\about.py -> build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  copying cymem\\__init__.py -> build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  creating build\\lib.win-amd64-cpython-313\\cymem\\tests\n",
      "                  copying cymem\\tests\\test_import.py -> build\\lib.win-amd64-cpython-313\\cymem\\tests\n",
      "                  copying cymem\\tests\\__init__.py -> build\\lib.win-amd64-cpython-313\\cymem\\tests\n",
      "                  copying cymem\\cymem.pyx -> build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  copying cymem\\cymem.pxd -> build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  copying cymem\\__init__.pxd -> build\\lib.win-amd64-cpython-313\\cymem\n",
      "                  running build_ext\n",
      "                  building 'cymem.cymem' extension\n",
      "                  error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\n",
      "                  [end of output]\n",
      "      \n",
      "              note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "              ERROR: Failed building wheel for cymem\n",
      "              Building wheel for murmurhash (pyproject.toml): started\n",
      "              Building wheel for murmurhash (pyproject.toml): finished with status 'error'\n",
      "              error: subprocess-exited-with-error\n",
      "      \n",
      "              Ãƒâ€” Building wheel for murmurhash (pyproject.toml) did not run successfully.\n",
      "              Ã¢â€\\x9dâ€š exit code: 1\n",
      "              Ã¢â€¢Â°Ã¢â€\\x9dâ‚¬> [19 lines of output]\n",
      "                  running bdist_wheel\n",
      "                  running build\n",
      "                  running build_py\n",
      "                  creating build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  copying murmurhash\\about.py -> build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  copying murmurhash\\__init__.py -> build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  creating build\\lib.win-amd64-cpython-313\\murmurhash\\tests\n",
      "                  copying murmurhash\\tests\\test_hash.py -> build\\lib.win-amd64-cpython-313\\murmurhash\\tests\n",
      "                  copying murmurhash\\tests\\test_import.py -> build\\lib.win-amd64-cpython-313\\murmurhash\\tests\n",
      "                  copying murmurhash\\tests\\__init__.py -> build\\lib.win-amd64-cpython-313\\murmurhash\\tests\n",
      "                  copying murmurhash\\mrmr.pyx -> build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  copying murmurhash\\mrmr.pxd -> build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  copying murmurhash\\__init__.pxd -> build\\lib.win-amd64-cpython-313\\murmurhash\n",
      "                  creating build\\lib.win-amd64-cpython-313\\murmurhash\\include\\murmurhash\n",
      "                  copying murmurhash\\include\\murmurhash\\MurmurHash2.h -> build\\lib.win-amd64-cpython-313\\murmurhash\\include\\murmurhash\n",
      "                  copying murmurhash\\include\\murmurhash\\MurmurHash3.h -> build\\lib.win-amd64-cpython-313\\murmurhash\\include\\murmurhash\n",
      "                  running build_ext\n",
      "                  building 'murmurhash.mrmr' extension\n",
      "                  error: Microsoft Visual C++ 14.0 or greater is required. Get it with \"Microsoft C++ Build Tools\": https://visualstudio.microsoft.com/visual-cpp-build-tools/\n",
      "                  [end of output]\n",
      "      \n",
      "              note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "              ERROR: Failed building wheel for murmurhash\n",
      "            Failed to build cymem murmurhash\n",
      "            ERROR: ERROR: Failed to build installable wheels for some pyproject.toml based projects (cymem, murmurhash)\n",
      "            [end of output]\n",
      "      \n",
      "        note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "      error: subprocess-exited-with-error\n",
      "      \n",
      "      Ã— pip subprocess to install build dependencies did not run successfully.\n",
      "      â”‚ exit code: 1\n",
      "      â•°â”€> See above for output.\n",
      "      \n",
      "      note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "      [end of output]\n",
      "  \n",
      "  note: This error originates from a subprocess, and is likely not a problem with pip.\n",
      "error: subprocess-exited-with-error\n",
      "\n",
      "× pip subprocess to install build dependencies did not run successfully.\n",
      "│ exit code: 1\n",
      "╰─> See above for output.\n",
      "\n",
      "note: This error originates from a subprocess, and is likely not a problem with pip.\n"
     ]
    }
   ],
   "source": [
    "!pip install spacy nltk scikit-learn tensorflow\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qRvhIPHnDBuL"
   },
   "source": [
    "# New Section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "MqtHMjbO_ABR"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "1iceSn3A_Akv"
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "auntDrU-_BqC"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "L4L9tC6cdAYR"
   },
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'spacy'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mspacy\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnltk\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m train_test_split\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'spacy'"
     ]
    }
   ],
   "source": [
    "import spacy\n",
    "import nltk\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "yu8ZKOIadMjt",
    "outputId": "fc6586cb-9e1a-4648-ab20-d1563898e6a5"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
      "[nltk_data]   Unzipping tokenizers/punkt.zip.\n",
      "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
      "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the spaCy English language model\n",
    "nlp = spacy.load('en_core_web_sm')\n",
    "\n",
    "# Download the NLTK resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "p_ZMf5kidajn"
   },
   "outputs": [],
   "source": [
    "def process_user_input(user_input):\n",
    "    # Use spaCy to extract task-related information\n",
    "    doc = nlp(user_input)\n",
    "    task_name = ' '.join([token.text for token in doc if not token.is_stop and not token.is_punct])\n",
    "    deadline = None\n",
    "    # Add code to extract deadline information from the user input\n",
    "\n",
    "    # Use NLTK to determine the task priority\n",
    "    priority = determine_priority(task_name)\n",
    "\n",
    "    return task_name, deadline, priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "KDzxPcBIdfY_"
   },
   "outputs": [],
   "source": [
    "def determine_priority(task_name):\n",
    "    # Use NLTK to analyze the task name and determine its priority\n",
    "    # You can use techniques like sentiment analysis, keyword matching, or rule-based methods\n",
    "    # Return the determined priority (e.g., 'high', 'medium', 'low')\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 211
    },
    "id": "psga5CqCeE6F",
    "outputId": "5391d046-749e-4fd2-ac94-2cd01791d0ac"
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tasks' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-668b87c07468>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Prepare sample task data with labels (priority)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpriorities\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Train a machine learning model (e.g., Logistic Regression)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'tasks' is not defined"
     ]
    }
   ],
   "source": [
    "# Prepare sample task data with labels (priority)\n",
    "X_train, X_test, y_train, y_test = train_test_split(tasks, priorities, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train a machine learning model (e.g., Logistic Regression)\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Evaluate the model's performance\n",
    "accuracy = model.score(X_test, y_test)\n",
    "print(f\"Task prioritization model accuracy: {accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 80
    },
    "id": "1fT0yY7ueoa-",
    "outputId": "f720cd5c-731c-4ee4-e09f-c3d3831e37fb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Example text data\n",
    "X_train = [\"book a flight\", \"order food\", \"make a reservation\", \"buy groceries\"]  # Your text data\n",
    "y_train = [1, 0, 1, 0]  # Your labels (e.g., 1 for flight-related, 0 for non-flight)\n",
    "\n",
    "# Initialize the vectorizer\n",
    "vectorizer = TfidfVectorizer()\n",
    "\n",
    "# Fit and transform the text data into numeric form\n",
    "X_train_tfidf = vectorizer.fit_transform(X_train)\n",
    "\n",
    "# Train the model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Evaluate or predict with the model\n",
    "# y_pred = model.predict(X_test_tfidf)  # if you have test data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 80
    },
    "id": "1fGu8VW_etiV",
    "outputId": "8cf71757-f1b5-4959-ce10-c1142830dfbc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Example text data\n",
    "X_train = [\"book a flight\", \"order food\", \"make a reservation\", \"buy groceries\"]\n",
    "y_train = [1, 0, 1, 0]\n",
    "\n",
    "# Initialize the count vectorizer\n",
    "vectorizer = CountVectorizer()\n",
    "\n",
    "# Fit and transform the text data\n",
    "X_train_count = vectorizer.fit_transform(X_train)\n",
    "\n",
    "# Train the Logistic Regression model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train_count, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wGDk1n8Jezmq",
    "outputId": "ec5bb330-2e2d-4301-b05d-8f1a77e0fd1b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions: [1 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Test data (new examples for prediction)\n",
    "X_test = [\n",
    "    \"book a ticket\",           # Similar to 'book a flight'\n",
    "    \"order pizza\",             # Similar to 'order food'\n",
    "    \"reserve a table\",         # Similar to 'make a reservation'\n",
    "    \"buy milk\",                # Similar to 'buy groceries'\n",
    "    \"plan a vacation\"          # Related to 'book a flight'\n",
    "]\n",
    "\n",
    "# Transform the test data using the same vectorizer\n",
    "X_test_tfidf = vectorizer.transform(X_test)  # Ensure you're using the same vectorizer used for training\n",
    "\n",
    "# Make predictions\n",
    "y_pred = model.predict(X_test_tfidf)\n",
    "\n",
    "# Output the predictions\n",
    "print(\"Predictions:\", y_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "whMdkC0xfSi6",
    "outputId": "7f50345a-269f-41e0-85cd-63c351577098"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions: [1 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# Example text data\n",
    "X_train = [\"book a flight\", \"order food\", \"make a reservation\", \"buy groceries\"]\n",
    "y_train = [1, 0, 1, 0]\n",
    "\n",
    "# Initialize the vectorizer\n",
    "vectorizer = TfidfVectorizer()\n",
    "\n",
    "# Fit and transform the text data into numeric form\n",
    "X_train_tfidf = vectorizer.fit_transform(X_train)\n",
    "\n",
    "# Train the model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train_tfidf, y_train)  # This line is crucial: it trains the model\n",
    "\n",
    "# Test data (new examples for prediction)\n",
    "X_test = [\n",
    "    \"book a ticket\",\n",
    "    \"order pizza\",\n",
    "    \"reserve a table\",\n",
    "    \"buy milk\",\n",
    "    \"plan a vacation\"\n",
    "]\n",
    "\n",
    "# Transform the test data using the same vectorizer\n",
    "X_test_tfidf = vectorizer.transform(X_test)\n",
    "\n",
    "# Make predictions (now this should work without error)\n",
    "y_pred = model.predict(X_test_tfidf)\n",
    "\n",
    "# Output the predictions\n",
    "print(\"Predictions:\", y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "cOCyVyVXfoUT"
   },
   "outputs": [],
   "source": [
    "def track_task_history(user_id, task_name, priority, deadline):\n",
    "    \"\"\"\n",
    "    Stores the user's task history in a database or data structure.\n",
    "    \"\"\"\n",
    "    # You can use a dictionary, list, or a database to store the task history\n",
    "    # For this example, we'll use a simple dictionary\n",
    "    if user_id not in task_history:\n",
    "        task_history[user_id] = []\n",
    "    task_history[user_id].append({\n",
    "        \"task_name\": task_name,\n",
    "        \"priority\": priority,\n",
    "        \"deadline\": deadline\n",
    "    })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Uf3J6yo7frua"
   },
   "outputs": [],
   "source": [
    "def get_task_suggestions(user_id):\n",
    "    \"\"\"\n",
    "    Analyzes the user's task history and provides relevant suggestions.\n",
    "    \"\"\"\n",
    "    if user_id not in task_history or len(task_history[user_id]) < 3:\n",
    "        # Not enough history to make suggestions\n",
    "        return []\n",
    "\n",
    "    user_tasks = task_history[user_id]\n",
    "\n",
    "    # Analyze the task history to identify patterns and make suggestions\n",
    "    # For example:\n",
    "    # - Identify frequently occurring tasks and suggest them\n",
    "    # - Suggest tasks that are similar to ones the user has completed before\n",
    "    # - Suggest tasks that are due soon or have a high priority\n",
    "\n",
    "    suggested_tasks = [\n",
    "        \"Book a meeting with the marketing team\",\n",
    "        \"Finish the quarterly report\",\n",
    "        \"Schedule a one-on-one with your manager\"\n",
    "    ]\n",
    "\n",
    "    return suggested_tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SvMK8ujRfxFy"
   },
   "outputs": [],
   "source": [
    "def get_task_recommendations(user_input, user_id):\n",
    "    task_name, deadline, priority = process_user_input(user_input)\n",
    "    priority_score = model.predict_proba([[task_name]])[0]\n",
    "\n",
    "    # Track the user's task history\n",
    "    track_task_history(user_id, task_name, priority, deadline)\n",
    "\n",
    "    # Get task suggestions based on the user's history\n",
    "    suggested_tasks = get_task_suggestions(user_id)\n",
    "\n",
    "    # Combine the prioritized task and the suggestions\n",
    "    recommended_tasks = [\n",
    "        {\"task\": task_name, \"priority\": priority, \"deadline\": deadline}\n",
    "    ] + suggested_tasks\n",
    "\n",
    "    return recommended_tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "Sj81ov-jf9Mx"
   },
   "outputs": [],
   "source": [
    "import time\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "def check_task_reminders():\n",
    "    \"\"\"\n",
    "    Checks the task deadlines and triggers notifications if needed.\n",
    "    \"\"\"\n",
    "    for user_id, user_tasks in task_history.items():\n",
    "        for task in user_tasks:\n",
    "            if task[\"deadline\"] and task[\"deadline\"] <= datetime.now() + timedelta(hours=1):\n",
    "                # Trigger a notification for the user\n",
    "                send_notification(user_id, task)\n",
    "\n",
    "def send_notification(user_id, task):\n",
    "    \"\"\"\n",
    "    Sends a notification to the user about an upcoming task deadline.\n",
    "    \"\"\"\n",
    "    print(f\"Notification for user {user_id}: '{task['task_name']}' is due soon!\")\n",
    "    # You can integrate with a notification service (e.g., email, push notification) to send the alert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "BqtC-__igE-8"
   },
   "outputs": [],
   "source": [
    "from googleapiclient.discovery import build\n",
    "from google.oauth2 import service_account\n",
    "\n",
    "def sync_with_google_calendar(user_id):\n",
    "    \"\"\"\n",
    "    Synchronizes the user's tasks and events between ProTask AI and Google Calendar.\n",
    "    \"\"\"\n",
    "    creds = service_account.Credentials.from_service_account_info(GOOGLE_CALENDAR_CREDENTIALS)\n",
    "    calendar_service = build('calendar', 'v3', credentials=creds)\n",
    "\n",
    "    # Fetch the user's calendar events\n",
    "    events = calendar_service.events().list(calendarId='primary').execute()\n",
    "\n",
    "    # Sync the events with the user's task history\n",
    "    for event in events['items']:\n",
    "        task_history[user_id].append({\n",
    "            \"task_name\": event['summary'],\n",
    "            \"deadline\": datetime.fromisoformat(event['start']['dateTime']),\n",
    "            \"priority\": \"medium\"  # You can determine the priority based on the event details\n",
    "        })\n",
    "\n",
    "    # Add new tasks from the ProTask AI system to the user's calendar\n",
    "    for task in task_history[user_id]:\n",
    "        if task[\"deadline\"] and task[\"deadline\"] not in [e['start']['dateTime'] for e in events['items']]:\n",
    "            calendar_service.events().insert(calendarId='primary', body={\n",
    "                'summary': task['task_name'],\n",
    "                'start': {'dateTime': task['deadline'].isoformat()},\n",
    "                'end': {'dateTime': (task['deadline'] + timedelta(hours=1)).isoformat()}\n",
    "            }).execute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "iS_zbKrXiPkX",
    "outputId": "ddf40dbe-01d7-460d-ff94-a6284a65dbb0"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions: [1 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Test data (new examples for prediction)\n",
    "X_test = [\n",
    "    \"book a ticket\",           # Similar to 'book a flight'\n",
    "    \"order pizza\",             # Similar to 'order food'\n",
    "    \"reserve a table\",         # Similar to 'make a reservation'\n",
    "    \"buy milk\",                # Similar to 'buy groceries'\n",
    "    \"plan a vacation\"          # Related to 'book a flight'\n",
    "]\n",
    "\n",
    "# Transform the test data using the same vectorizer\n",
    "X_test_tfidf = vectorizer.transform(X_test)  # Ensure you're using the same vectorizer used for training\n",
    "\n",
    "# Make predictions\n",
    "y_pred = model.predict(X_test_tfidf)\n",
    "\n",
    "# Output the predictions\n",
    "print(\"Predictions:\", y_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 168
    },
    "id": "ki41tYYAjdub",
    "outputId": "12e23a14-3d9c-4cb9-f9fb-7892da9bb63a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Task List</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"flex mb-4\">\n",
       "            <input id=\"task-input\" type=\"text\" placeholder=\"Add new task\"\n",
       "                   class=\"flex-1 p-2 border rounded-l-md\">\n",
       "            <button onclick=\"addTask()\" class=\"bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600\">\n",
       "                Add\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-2\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "\n",
       "        function addTask() {\n",
       "            let taskInput = document.getElementById(\"task-input\");\n",
       "            let taskName = taskInput.value.trim();\n",
       "\n",
       "            if (taskName !== \"\") {\n",
       "                let taskId = Date.now(); // Unique task ID\n",
       "                let task = { id: taskId, name: taskName, completed: false };\n",
       "                tasks.push(task);\n",
       "\n",
       "                // Clear input field\n",
       "                taskInput.value = \"\";\n",
       "\n",
       "                // Render tasks again\n",
       "                renderTasks();\n",
       "            }\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.completed = !task.completed;\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function renderTasks() {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            tasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = \"flex items-center justify-between p-4 border-b\";\n",
       "\n",
       "                let taskCheckbox = document.createElement(\"input\");\n",
       "                taskCheckbox.type = \"checkbox\";\n",
       "                taskCheckbox.checked = task.completed;\n",
       "                taskCheckbox.onclick = function() {\n",
       "                    toggleTaskCompletion(task.id);\n",
       "                };\n",
       "\n",
       "                let taskLabel = document.createElement(\"span\");\n",
       "                taskLabel.className = task.completed ? \"completed\" : \"\";\n",
       "                taskLabel.textContent = task.name;\n",
       "\n",
       "                taskElement.appendChild(taskCheckbox);\n",
       "                taskElement.appendChild(taskLabel);\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List View\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Task List</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"flex mb-4\">\n",
    "            <input id=\"task-input\" type=\"text\" placeholder=\"Add new task\"\n",
    "                   class=\"flex-1 p-2 border rounded-l-md\">\n",
    "            <button onclick=\"addTask()\" class=\"bg-blue-500 text-white p-2 rounded-r-md hover:bg-blue-600\">\n",
    "                Add\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-2\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "\n",
    "        function addTask() {\n",
    "            let taskInput = document.getElementById(\"task-input\");\n",
    "            let taskName = taskInput.value.trim();\n",
    "\n",
    "            if (taskName !== \"\") {\n",
    "                let taskId = Date.now(); // Unique task ID\n",
    "                let task = { id: taskId, name: taskName, completed: false };\n",
    "                tasks.push(task);\n",
    "\n",
    "                // Clear input field\n",
    "                taskInput.value = \"\";\n",
    "\n",
    "                // Render tasks again\n",
    "                renderTasks();\n",
    "            }\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.completed = !task.completed;\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function renderTasks() {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            tasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = \"flex items-center justify-between p-4 border-b\";\n",
    "\n",
    "                let taskCheckbox = document.createElement(\"input\");\n",
    "                taskCheckbox.type = \"checkbox\";\n",
    "                taskCheckbox.checked = task.completed;\n",
    "                taskCheckbox.onclick = function() {\n",
    "                    toggleTaskCompletion(task.id);\n",
    "                };\n",
    "\n",
    "                let taskLabel = document.createElement(\"span\");\n",
    "                taskLabel.className = task.completed ? \"completed\" : \"\";\n",
    "                taskLabel.textContent = task.name;\n",
    "\n",
    "                taskElement.appendChild(taskCheckbox);\n",
    "                taskElement.appendChild(taskLabel);\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 336
    },
    "id": "ZHjtDgpqj2Ob",
    "outputId": "967c56bd-2f22-4ae8-e127-6bab1bb6ce13"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Task List with Details</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "        .high-priority {\n",
       "            background-color: #f87171;\n",
       "        }\n",
       "        .medium-priority {\n",
       "            background-color: #fbbf24;\n",
       "        }\n",
       "        .low-priority {\n",
       "            background-color: #34d399;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"space-y-4\">\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
       "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"low\">Low Priority</option>\n",
       "                    <option value=\"medium\">Medium Priority</option>\n",
       "                    <option value=\"high\">High Priority</option>\n",
       "                </select>\n",
       "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"new\">New</option>\n",
       "                    <option value=\"in-progress\">In Progress</option>\n",
       "                    <option value=\"completed\">Completed</option>\n",
       "                </select>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
       "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
       "            </div>\n",
       "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
       "                Add Task\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "\n",
       "        function addTask() {\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            // Validate the inputs\n",
       "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
       "                alert(\"Please fill in all required fields.\");\n",
       "                return;\n",
       "            }\n",
       "\n",
       "            let taskId = Date.now(); // Unique task ID\n",
       "            let task = {\n",
       "                id: taskId,\n",
       "                name: taskName,\n",
       "                deadline: deadline,\n",
       "                priority: priority,\n",
       "                status: status,\n",
       "                estimatedTime: estimatedTime,\n",
       "                notes: notes\n",
       "            };\n",
       "            tasks.push(task);\n",
       "\n",
       "            // Clear input fields\n",
       "            document.getElementById(\"task-input\").value = \"\";\n",
       "            document.getElementById(\"deadline-input\").value = \"\";\n",
       "            document.getElementById(\"priority-input\").value = \"low\";\n",
       "            document.getElementById(\"status-input\").value = \"new\";\n",
       "            document.getElementById(\"time-input\").value = \"\";\n",
       "            document.getElementById(\"notes-input\").value = \"\";\n",
       "\n",
       "            // Render tasks again\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function renderTasks() {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            tasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
       "\n",
       "                // Task name\n",
       "                let taskNameElement = document.createElement(\"span\");\n",
       "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
       "                taskNameElement.textContent = task.name;\n",
       "\n",
       "                // Task details\n",
       "                let taskDetailsElement = document.createElement(\"div\");\n",
       "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
       "\n",
       "                // Deadline\n",
       "                let deadlineElement = document.createElement(\"div\");\n",
       "                deadlineElement.textContent = `Deadline: ${new Date(task.deadline).toLocaleString()}`;\n",
       "                taskDetailsElement.appendChild(deadlineElement);\n",
       "\n",
       "                // Priority level\n",
       "                let priorityElement = document.createElement(\"div\");\n",
       "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(priorityElement);\n",
       "\n",
       "                // Estimated time\n",
       "                let timeElement = document.createElement(\"div\");\n",
       "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
       "                taskDetailsElement.appendChild(timeElement);\n",
       "\n",
       "                // Status\n",
       "                let statusElement = document.createElement(\"div\");\n",
       "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(statusElement);\n",
       "\n",
       "                // Notes\n",
       "                if (task.notes) {\n",
       "                    let notesElement = document.createElement(\"div\");\n",
       "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
       "                    taskDetailsElement.appendChild(notesElement);\n",
       "                }\n",
       "\n",
       "                // Append elements to task container\n",
       "                taskElement.appendChild(taskNameElement);\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "\n",
       "                // Task completion toggle button\n",
       "                let toggleButton = document.createElement(\"button\");\n",
       "                toggleButton.textContent = task.status === 'completed' ? \"Mark as In Progress\" : \"Mark as Completed\";\n",
       "                toggleButton.className = \"mt-2 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\";\n",
       "                toggleButton.onclick = function() {\n",
       "                    toggleTaskCompletion(task.id);\n",
       "                };\n",
       "\n",
       "                taskElement.appendChild(toggleButton);\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List View with additional details\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Task List with Details</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "        .high-priority {\n",
    "            background-color: #f87171;\n",
    "        }\n",
    "        .medium-priority {\n",
    "            background-color: #fbbf24;\n",
    "        }\n",
    "        .low-priority {\n",
    "            background-color: #34d399;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"space-y-4\">\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
    "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"low\">Low Priority</option>\n",
    "                    <option value=\"medium\">Medium Priority</option>\n",
    "                    <option value=\"high\">High Priority</option>\n",
    "                </select>\n",
    "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"new\">New</option>\n",
    "                    <option value=\"in-progress\">In Progress</option>\n",
    "                    <option value=\"completed\">Completed</option>\n",
    "                </select>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
    "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
    "            </div>\n",
    "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
    "                Add Task\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "\n",
    "        function addTask() {\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            // Validate the inputs\n",
    "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
    "                alert(\"Please fill in all required fields.\");\n",
    "                return;\n",
    "            }\n",
    "\n",
    "            let taskId = Date.now(); // Unique task ID\n",
    "            let task = {\n",
    "                id: taskId,\n",
    "                name: taskName,\n",
    "                deadline: deadline,\n",
    "                priority: priority,\n",
    "                status: status,\n",
    "                estimatedTime: estimatedTime,\n",
    "                notes: notes\n",
    "            };\n",
    "            tasks.push(task);\n",
    "\n",
    "            // Clear input fields\n",
    "            document.getElementById(\"task-input\").value = \"\";\n",
    "            document.getElementById(\"deadline-input\").value = \"\";\n",
    "            document.getElementById(\"priority-input\").value = \"low\";\n",
    "            document.getElementById(\"status-input\").value = \"new\";\n",
    "            document.getElementById(\"time-input\").value = \"\";\n",
    "            document.getElementById(\"notes-input\").value = \"\";\n",
    "\n",
    "            // Render tasks again\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function renderTasks() {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            tasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
    "\n",
    "                // Task name\n",
    "                let taskNameElement = document.createElement(\"span\");\n",
    "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
    "                taskNameElement.textContent = task.name;\n",
    "\n",
    "                // Task details\n",
    "                let taskDetailsElement = document.createElement(\"div\");\n",
    "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
    "\n",
    "                // Deadline\n",
    "                let deadlineElement = document.createElement(\"div\");\n",
    "                deadlineElement.textContent = `Deadline: ${new Date(task.deadline).toLocaleString()}`;\n",
    "                taskDetailsElement.appendChild(deadlineElement);\n",
    "\n",
    "                // Priority level\n",
    "                let priorityElement = document.createElement(\"div\");\n",
    "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(priorityElement);\n",
    "\n",
    "                // Estimated time\n",
    "                let timeElement = document.createElement(\"div\");\n",
    "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
    "                taskDetailsElement.appendChild(timeElement);\n",
    "\n",
    "                // Status\n",
    "                let statusElement = document.createElement(\"div\");\n",
    "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(statusElement);\n",
    "\n",
    "                // Notes\n",
    "                if (task.notes) {\n",
    "                    let notesElement = document.createElement(\"div\");\n",
    "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
    "                    taskDetailsElement.appendChild(notesElement);\n",
    "                }\n",
    "\n",
    "                // Append elements to task container\n",
    "                taskElement.appendChild(taskNameElement);\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "\n",
    "                // Task completion toggle button\n",
    "                let toggleButton = document.createElement(\"button\");\n",
    "                toggleButton.textContent = task.status === 'completed' ? \"Mark as In Progress\" : \"Mark as Completed\";\n",
    "                toggleButton.className = \"mt-2 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\";\n",
    "                toggleButton.onclick = function() {\n",
    "                    toggleTaskCompletion(task.id);\n",
    "                };\n",
    "\n",
    "                taskElement.appendChild(toggleButton);\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "lm6p4nOGmj0K",
    "outputId": "744760a2-6838-4580-ae5f-3c1bd5cfaa2b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Task List with Sorting and Filtering</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "        .high-priority {\n",
       "            background-color: #f87171;\n",
       "        }\n",
       "        .medium-priority {\n",
       "            background-color: #fbbf24;\n",
       "        }\n",
       "        .low-priority {\n",
       "            background-color: #34d399;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
       "\n",
       "        <!-- Sorting and Filtering Controls -->\n",
       "        <div class=\"mb-6\">\n",
       "            <div class=\"flex justify-between space-x-4\">\n",
       "                <!-- Sort by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
       "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
       "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
       "                        <option value=\"priority\">Priority</option>\n",
       "                        <option value=\"status\">Status</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <!-- Filter by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
       "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"low\">Low</option>\n",
       "                        <option value=\"medium\">Medium</option>\n",
       "                        <option value=\"high\">High</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
       "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"new\">New</option>\n",
       "                        <option value=\"in-progress\">In Progress</option>\n",
       "                        <option value=\"completed\">Completed</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "            </div>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"space-y-4\">\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
       "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"low\">Low Priority</option>\n",
       "                    <option value=\"medium\">Medium Priority</option>\n",
       "                    <option value=\"high\">High Priority</option>\n",
       "                </select>\n",
       "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"new\">New</option>\n",
       "                    <option value=\"in-progress\">In Progress</option>\n",
       "                    <option value=\"completed\">Completed</option>\n",
       "                </select>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
       "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
       "            </div>\n",
       "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
       "                Add Task\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management, Sorting, and Filtering -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "\n",
       "        function addTask() {\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            // Validate the inputs\n",
       "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
       "                alert(\"Please fill in all required fields.\");\n",
       "                return;\n",
       "            }\n",
       "\n",
       "            let taskId = Date.now(); // Unique task ID\n",
       "            let task = {\n",
       "                id: taskId,\n",
       "                name: taskName,\n",
       "                deadline: new Date(deadline),\n",
       "                priority: priority,\n",
       "                status: status,\n",
       "                estimatedTime: estimatedTime,\n",
       "                notes: notes\n",
       "            };\n",
       "            tasks.push(task);\n",
       "\n",
       "            // Clear input fields\n",
       "            document.getElementById(\"task-input\").value = \"\";\n",
       "            document.getElementById(\"deadline-input\").value = \"\";\n",
       "            document.getElementById(\"priority-input\").value = \"low\";\n",
       "            document.getElementById(\"status-input\").value = \"new\";\n",
       "            document.getElementById(\"time-input\").value = \"\";\n",
       "            document.getElementById(\"notes-input\").value = \"\";\n",
       "\n",
       "            // Render tasks again\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function sortTasks() {\n",
       "            const sortBy = document.getElementById(\"sort-by\").value;\n",
       "\n",
       "            if (sortBy === \"deadline-asc\") {\n",
       "                tasks.sort((a, b) => a.deadline - b.deadline);\n",
       "            } else if (sortBy === \"deadline-desc\") {\n",
       "                tasks.sort((a, b) => b.deadline - a.deadline);\n",
       "            } else if (sortBy === \"priority\") {\n",
       "                tasks.sort((a, b) => {\n",
       "                    const priorityOrder = { high: 3, medium: 2, low: 1 };\n",
       "                    return priorityOrder[b.priority] - priorityOrder[a.priority];\n",
       "                });\n",
       "            } else if (sortBy === \"status\") {\n",
       "                const statusOrder = { new: 1, \"in-progress\": 2, completed: 3 };\n",
       "                tasks.sort((a, b) => statusOrder[a.status] - statusOrder[b.status]);\n",
       "            }\n",
       "\n",
       "            renderTasks(); // Re-render tasks after sorting\n",
       "        }\n",
       "\n",
       "        function filterTasks() {\n",
       "            const filterPriority = document.getElementById(\"filter-priority\").value;\n",
       "            const filterStatus = document.getElementById(\"filter-status\").value;\n",
       "\n",
       "            let filteredTasks = tasks;\n",
       "\n",
       "            // Filter by priority\n",
       "            if (filterPriority !== \"all\") {\n",
       "                filteredTasks = filteredTasks.filter(task => task.priority === filterPriority);\n",
       "            }\n",
       "\n",
       "            // Filter by status\n",
       "            if (filterStatus !== \"all\") {\n",
       "                filteredTasks = filteredTasks.filter(task => task.status === filterStatus);\n",
       "            }\n",
       "\n",
       "            renderTasks(filteredTasks); // Render the filtered tasks\n",
       "        }\n",
       "\n",
       "        function renderTasks(filteredTasks = tasks) {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            filteredTasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
       "\n",
       "                // Task name\n",
       "                let taskNameElement = document.createElement(\"span\");\n",
       "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
       "                taskNameElement.textContent = task.name;\n",
       "\n",
       "                // Task details\n",
       "                let taskDetailsElement = document.createElement(\"div\");\n",
       "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
       "\n",
       "                // Deadline\n",
       "                let deadlineElement = document.createElement(\"div\");\n",
       "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
       "                taskDetailsElement.appendChild(deadlineElement);\n",
       "\n",
       "                // Priority level\n",
       "                let priorityElement = document.createElement(\"div\");\n",
       "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(priorityElement);\n",
       "\n",
       "                // Estimated time\n",
       "                let timeElement = document.createElement(\"div\");\n",
       "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
       "                taskDetailsElement.appendChild(timeElement);\n",
       "\n",
       "                // Status\n",
       "                let statusElement = document.createElement(\"div\");\n",
       "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(statusElement);\n",
       "\n",
       "                // Notes\n",
       "                if (task.notes) {\n",
       "                    let notesElement = document.createElement(\"div\");\n",
       "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
       "                    taskDetailsElement.appendChild(notesElement);\n",
       "                }\n",
       "\n",
       "                // Append elements to task container\n",
       "                taskElement.appendChild(taskNameElement);\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "\n",
       "                // Task completion toggle button\n",
       "                let toggleButton = document.createElement(\"button\");\n",
       "                toggleButton.textContent = task.status === 'completed' ? \"Mark as In Progress\" : \"Mark as Completed\";\n",
       "                toggleButton.className = \"mt-2 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\";\n",
       "                toggleButton.onclick = function() {\n",
       "                    toggleTaskCompletion(task.id);\n",
       "                };\n",
       "\n",
       "                taskElement.appendChild(toggleButton);\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "\n",
       "        // Listen for changes in the sort or filter controls\n",
       "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
       "            sortTasks();\n",
       "            filterTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
       "            filterTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
       "            filterTasks();\n",
       "        });\n",
       "\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List with Sorting and Filtering\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Task List with Sorting and Filtering</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "        .high-priority {\n",
    "            background-color: #f87171;\n",
    "        }\n",
    "        .medium-priority {\n",
    "            background-color: #fbbf24;\n",
    "        }\n",
    "        .low-priority {\n",
    "            background-color: #34d399;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
    "\n",
    "        <!-- Sorting and Filtering Controls -->\n",
    "        <div class=\"mb-6\">\n",
    "            <div class=\"flex justify-between space-x-4\">\n",
    "                <!-- Sort by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
    "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
    "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
    "                        <option value=\"priority\">Priority</option>\n",
    "                        <option value=\"status\">Status</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <!-- Filter by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
    "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"low\">Low</option>\n",
    "                        <option value=\"medium\">Medium</option>\n",
    "                        <option value=\"high\">High</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
    "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"new\">New</option>\n",
    "                        <option value=\"in-progress\">In Progress</option>\n",
    "                        <option value=\"completed\">Completed</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "            </div>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"space-y-4\">\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
    "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"low\">Low Priority</option>\n",
    "                    <option value=\"medium\">Medium Priority</option>\n",
    "                    <option value=\"high\">High Priority</option>\n",
    "                </select>\n",
    "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"new\">New</option>\n",
    "                    <option value=\"in-progress\">In Progress</option>\n",
    "                    <option value=\"completed\">Completed</option>\n",
    "                </select>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
    "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
    "            </div>\n",
    "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
    "                Add Task\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management, Sorting, and Filtering -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "\n",
    "        function addTask() {\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            // Validate the inputs\n",
    "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
    "                alert(\"Please fill in all required fields.\");\n",
    "                return;\n",
    "            }\n",
    "\n",
    "            let taskId = Date.now(); // Unique task ID\n",
    "            let task = {\n",
    "                id: taskId,\n",
    "                name: taskName,\n",
    "                deadline: new Date(deadline),\n",
    "                priority: priority,\n",
    "                status: status,\n",
    "                estimatedTime: estimatedTime,\n",
    "                notes: notes\n",
    "            };\n",
    "            tasks.push(task);\n",
    "\n",
    "            // Clear input fields\n",
    "            document.getElementById(\"task-input\").value = \"\";\n",
    "            document.getElementById(\"deadline-input\").value = \"\";\n",
    "            document.getElementById(\"priority-input\").value = \"low\";\n",
    "            document.getElementById(\"status-input\").value = \"new\";\n",
    "            document.getElementById(\"time-input\").value = \"\";\n",
    "            document.getElementById(\"notes-input\").value = \"\";\n",
    "\n",
    "            // Render tasks again\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function sortTasks() {\n",
    "            const sortBy = document.getElementById(\"sort-by\").value;\n",
    "\n",
    "            if (sortBy === \"deadline-asc\") {\n",
    "                tasks.sort((a, b) => a.deadline - b.deadline);\n",
    "            } else if (sortBy === \"deadline-desc\") {\n",
    "                tasks.sort((a, b) => b.deadline - a.deadline);\n",
    "            } else if (sortBy === \"priority\") {\n",
    "                tasks.sort((a, b) => {\n",
    "                    const priorityOrder = { high: 3, medium: 2, low: 1 };\n",
    "                    return priorityOrder[b.priority] - priorityOrder[a.priority];\n",
    "                });\n",
    "            } else if (sortBy === \"status\") {\n",
    "                const statusOrder = { new: 1, \"in-progress\": 2, completed: 3 };\n",
    "                tasks.sort((a, b) => statusOrder[a.status] - statusOrder[b.status]);\n",
    "            }\n",
    "\n",
    "            renderTasks(); // Re-render tasks after sorting\n",
    "        }\n",
    "\n",
    "        function filterTasks() {\n",
    "            const filterPriority = document.getElementById(\"filter-priority\").value;\n",
    "            const filterStatus = document.getElementById(\"filter-status\").value;\n",
    "\n",
    "            let filteredTasks = tasks;\n",
    "\n",
    "            // Filter by priority\n",
    "            if (filterPriority !== \"all\") {\n",
    "                filteredTasks = filteredTasks.filter(task => task.priority === filterPriority);\n",
    "            }\n",
    "\n",
    "            // Filter by status\n",
    "            if (filterStatus !== \"all\") {\n",
    "                filteredTasks = filteredTasks.filter(task => task.status === filterStatus);\n",
    "            }\n",
    "\n",
    "            renderTasks(filteredTasks); // Render the filtered tasks\n",
    "        }\n",
    "\n",
    "        function renderTasks(filteredTasks = tasks) {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            filteredTasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
    "\n",
    "                // Task name\n",
    "                let taskNameElement = document.createElement(\"span\");\n",
    "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
    "                taskNameElement.textContent = task.name;\n",
    "\n",
    "                // Task details\n",
    "                let taskDetailsElement = document.createElement(\"div\");\n",
    "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
    "\n",
    "                // Deadline\n",
    "                let deadlineElement = document.createElement(\"div\");\n",
    "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
    "                taskDetailsElement.appendChild(deadlineElement);\n",
    "\n",
    "                // Priority level\n",
    "                let priorityElement = document.createElement(\"div\");\n",
    "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(priorityElement);\n",
    "\n",
    "                // Estimated time\n",
    "                let timeElement = document.createElement(\"div\");\n",
    "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
    "                taskDetailsElement.appendChild(timeElement);\n",
    "\n",
    "                // Status\n",
    "                let statusElement = document.createElement(\"div\");\n",
    "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(statusElement);\n",
    "\n",
    "                // Notes\n",
    "                if (task.notes) {\n",
    "                    let notesElement = document.createElement(\"div\");\n",
    "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
    "                    taskDetailsElement.appendChild(notesElement);\n",
    "                }\n",
    "\n",
    "                // Append elements to task container\n",
    "                taskElement.appendChild(taskNameElement);\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "\n",
    "                // Task completion toggle button\n",
    "                let toggleButton = document.createElement(\"button\");\n",
    "                toggleButton.textContent = task.status === 'completed' ? \"Mark as In Progress\" : \"Mark as Completed\";\n",
    "                toggleButton.className = \"mt-2 w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\";\n",
    "                toggleButton.onclick = function() {\n",
    "                    toggleTaskCompletion(task.id);\n",
    "                };\n",
    "\n",
    "                taskElement.appendChild(toggleButton);\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "\n",
    "        // Listen for changes in the sort or filter controls\n",
    "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
    "            sortTasks();\n",
    "            filterTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
    "            filterTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
    "            filterTasks();\n",
    "        });\n",
    "\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "FEfQoMsWrX_j",
    "outputId": "97446519-c313-4bfb-8155-63d36b731931"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Interactive Task List</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "        .high-priority {\n",
       "            background-color: #f87171;\n",
       "        }\n",
       "        .medium-priority {\n",
       "            background-color: #fbbf24;\n",
       "        }\n",
       "        .low-priority {\n",
       "            background-color: #34d399;\n",
       "        }\n",
       "        .highlighted {\n",
       "            border: 2px solid #4CAF50;\n",
       "            background-color: #f0fff4;\n",
       "        }\n",
       "        .expanded {\n",
       "            background-color: #f9fafb;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
       "\n",
       "        <!-- Sorting and Filtering Controls -->\n",
       "        <div class=\"mb-6\">\n",
       "            <div class=\"flex justify-between space-x-4\">\n",
       "                <!-- Sort by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
       "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
       "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
       "                        <option value=\"priority\">Priority</option>\n",
       "                        <option value=\"status\">Status</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <!-- Filter by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
       "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"low\">Low</option>\n",
       "                        <option value=\"medium\">Medium</option>\n",
       "                        <option value=\"high\">High</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
       "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"new\">New</option>\n",
       "                        <option value=\"in-progress\">In Progress</option>\n",
       "                        <option value=\"completed\">Completed</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "            </div>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"space-y-4\">\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
       "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"low\">Low Priority</option>\n",
       "                    <option value=\"medium\">Medium Priority</option>\n",
       "                    <option value=\"high\">High Priority</option>\n",
       "                </select>\n",
       "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
       "                    <option value=\"new\">New</option>\n",
       "                    <option value=\"in-progress\">In Progress</option>\n",
       "                    <option value=\"completed\">Completed</option>\n",
       "                </select>\n",
       "            </div>\n",
       "            <div class=\"flex\">\n",
       "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
       "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
       "            </div>\n",
       "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
       "                Add Task\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "        let selectedTaskId = null; // To track selected task for expanded view\n",
       "\n",
       "        function addTask() {\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            // Validate the inputs\n",
       "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
       "                alert(\"Please fill in all required fields.\");\n",
       "                return;\n",
       "            }\n",
       "\n",
       "            let taskId = Date.now(); // Unique task ID\n",
       "            let task = {\n",
       "                id: taskId,\n",
       "                name: taskName,\n",
       "                deadline: new Date(deadline),\n",
       "                priority: priority,\n",
       "                status: status,\n",
       "                estimatedTime: estimatedTime,\n",
       "                notes: notes\n",
       "            };\n",
       "            tasks.push(task);\n",
       "\n",
       "            // Clear input fields\n",
       "            document.getElementById(\"task-input\").value = \"\";\n",
       "            document.getElementById(\"deadline-input\").value = \"\";\n",
       "            document.getElementById(\"priority-input\").value = \"low\";\n",
       "            document.getElementById(\"status-input\").value = \"new\";\n",
       "            document.getElementById(\"time-input\").value = \"\";\n",
       "            document.getElementById(\"notes-input\").value = \"\";\n",
       "\n",
       "            // Render tasks again\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function editTask(taskId) {\n",
       "            // Find the task to edit\n",
       "            let task = tasks.find(task => task.id === taskId);\n",
       "            if (!task) return;\n",
       "\n",
       "            // Set input fields to the task's current values\n",
       "            document.getElementById(\"task-input\").value = task.name;\n",
       "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
       "            document.getElementById(\"priority-input\").value = task.priority;\n",
       "            document.getElementById(\"status-input\").value = task.status;\n",
       "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
       "            document.getElementById(\"notes-input\").value = task.notes;\n",
       "\n",
       "            // Set the task id to be edited\n",
       "            selectedTaskId = taskId;\n",
       "        }\n",
       "\n",
       "        function updateTask() {\n",
       "            // Get the updated task details from input fields\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            if (!selectedTaskId) return;\n",
       "\n",
       "            // Find and update the selected task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === selectedTaskId) {\n",
       "                    task.name = taskName;\n",
       "                    task.deadline = new Date(deadline);\n",
       "                    task.priority = priority;\n",
       "                    task.status = status;\n",
       "                    task.estimatedTime = estimatedTime;\n",
       "                    task.notes = notes;\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            selectedTaskId = null; // Reset the selected task ID\n",
       "\n",
       "            // Render tasks after update\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function renderTasks() {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            tasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
       "\n",
       "                // Task name\n",
       "                let taskNameElement = document.createElement(\"span\");\n",
       "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
       "                taskNameElement.textContent = task.name;\n",
       "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
       "\n",
       "                // Task details\n",
       "                let taskDetailsElement = document.createElement(\"div\");\n",
       "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
       "                let deadlineElement = document.createElement(\"div\");\n",
       "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
       "                taskDetailsElement.appendChild(deadlineElement);\n",
       "\n",
       "                let priorityElement = document.createElement(\"div\");\n",
       "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(priorityElement);\n",
       "\n",
       "                let timeElement = document.createElement(\"div\");\n",
       "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
       "                taskDetailsElement.appendChild(timeElement);\n",
       "\n",
       "                let statusElement = document.createElement(\"div\");\n",
       "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(statusElement);\n",
       "\n",
       "                if (task.notes) {\n",
       "                    let notesElement = document.createElement(\"div\");\n",
       "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
       "                    taskDetailsElement.appendChild(notesElement);\n",
       "                }\n",
       "\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "\n",
       "                // Append elements to task container\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "\n",
       "        function expandTaskDetails(taskId) {\n",
       "            // Expand the task details when clicked\n",
       "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
       "            taskElement.classList.toggle(\"expanded\");\n",
       "\n",
       "            // Add or remove highlight\n",
       "            let taskList = document.querySelectorAll(\".task\");\n",
       "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
       "\n",
       "            taskElement.classList.add(\"highlighted\");\n",
       "        }\n",
       "\n",
       "        // Listen for changes in the sort or filter controls\n",
       "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List with Interactive Details and Actions\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Interactive Task List</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "        .high-priority {\n",
    "            background-color: #f87171;\n",
    "        }\n",
    "        .medium-priority {\n",
    "            background-color: #fbbf24;\n",
    "        }\n",
    "        .low-priority {\n",
    "            background-color: #34d399;\n",
    "        }\n",
    "        .highlighted {\n",
    "            border: 2px solid #4CAF50;\n",
    "            background-color: #f0fff4;\n",
    "        }\n",
    "        .expanded {\n",
    "            background-color: #f9fafb;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
    "\n",
    "        <!-- Sorting and Filtering Controls -->\n",
    "        <div class=\"mb-6\">\n",
    "            <div class=\"flex justify-between space-x-4\">\n",
    "                <!-- Sort by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
    "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
    "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
    "                        <option value=\"priority\">Priority</option>\n",
    "                        <option value=\"status\">Status</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <!-- Filter by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
    "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"low\">Low</option>\n",
    "                        <option value=\"medium\">Medium</option>\n",
    "                        <option value=\"high\">High</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
    "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"new\">New</option>\n",
    "                        <option value=\"in-progress\">In Progress</option>\n",
    "                        <option value=\"completed\">Completed</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "            </div>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"space-y-4\">\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"flex-1 p-2 border rounded-l-md\" required>\n",
    "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border\" required>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <select id=\"priority-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"low\">Low Priority</option>\n",
    "                    <option value=\"medium\">Medium Priority</option>\n",
    "                    <option value=\"high\">High Priority</option>\n",
    "                </select>\n",
    "                <select id=\"status-input\" class=\"p-2 border flex-1 rounded-md\">\n",
    "                    <option value=\"new\">New</option>\n",
    "                    <option value=\"in-progress\">In Progress</option>\n",
    "                    <option value=\"completed\">Completed</option>\n",
    "                </select>\n",
    "            </div>\n",
    "            <div class=\"flex\">\n",
    "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-l-md\" required>\n",
    "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"flex-1 p-2 border rounded-r-md\">\n",
    "            </div>\n",
    "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600\">\n",
    "                Add Task\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-4 mt-6\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "        let selectedTaskId = null; // To track selected task for expanded view\n",
    "\n",
    "        function addTask() {\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            // Validate the inputs\n",
    "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
    "                alert(\"Please fill in all required fields.\");\n",
    "                return;\n",
    "            }\n",
    "\n",
    "            let taskId = Date.now(); // Unique task ID\n",
    "            let task = {\n",
    "                id: taskId,\n",
    "                name: taskName,\n",
    "                deadline: new Date(deadline),\n",
    "                priority: priority,\n",
    "                status: status,\n",
    "                estimatedTime: estimatedTime,\n",
    "                notes: notes\n",
    "            };\n",
    "            tasks.push(task);\n",
    "\n",
    "            // Clear input fields\n",
    "            document.getElementById(\"task-input\").value = \"\";\n",
    "            document.getElementById(\"deadline-input\").value = \"\";\n",
    "            document.getElementById(\"priority-input\").value = \"low\";\n",
    "            document.getElementById(\"status-input\").value = \"new\";\n",
    "            document.getElementById(\"time-input\").value = \"\";\n",
    "            document.getElementById(\"notes-input\").value = \"\";\n",
    "\n",
    "            // Render tasks again\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function editTask(taskId) {\n",
    "            // Find the task to edit\n",
    "            let task = tasks.find(task => task.id === taskId);\n",
    "            if (!task) return;\n",
    "\n",
    "            // Set input fields to the task's current values\n",
    "            document.getElementById(\"task-input\").value = task.name;\n",
    "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
    "            document.getElementById(\"priority-input\").value = task.priority;\n",
    "            document.getElementById(\"status-input\").value = task.status;\n",
    "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
    "            document.getElementById(\"notes-input\").value = task.notes;\n",
    "\n",
    "            // Set the task id to be edited\n",
    "            selectedTaskId = taskId;\n",
    "        }\n",
    "\n",
    "        function updateTask() {\n",
    "            // Get the updated task details from input fields\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            if (!selectedTaskId) return;\n",
    "\n",
    "            // Find and update the selected task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === selectedTaskId) {\n",
    "                    task.name = taskName;\n",
    "                    task.deadline = new Date(deadline);\n",
    "                    task.priority = priority;\n",
    "                    task.status = status;\n",
    "                    task.estimatedTime = estimatedTime;\n",
    "                    task.notes = notes;\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            selectedTaskId = null; // Reset the selected task ID\n",
    "\n",
    "            // Render tasks after update\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function renderTasks() {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            tasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
    "\n",
    "                // Task name\n",
    "                let taskNameElement = document.createElement(\"span\");\n",
    "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
    "                taskNameElement.textContent = task.name;\n",
    "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
    "\n",
    "                // Task details\n",
    "                let taskDetailsElement = document.createElement(\"div\");\n",
    "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2\";\n",
    "                let deadlineElement = document.createElement(\"div\");\n",
    "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
    "                taskDetailsElement.appendChild(deadlineElement);\n",
    "\n",
    "                let priorityElement = document.createElement(\"div\");\n",
    "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(priorityElement);\n",
    "\n",
    "                let timeElement = document.createElement(\"div\");\n",
    "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
    "                taskDetailsElement.appendChild(timeElement);\n",
    "\n",
    "                let statusElement = document.createElement(\"div\");\n",
    "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(statusElement);\n",
    "\n",
    "                if (task.notes) {\n",
    "                    let notesElement = document.createElement(\"div\");\n",
    "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
    "                    taskDetailsElement.appendChild(notesElement);\n",
    "                }\n",
    "\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "\n",
    "                // Append elements to task container\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "\n",
    "        function expandTaskDetails(taskId) {\n",
    "            // Expand the task details when clicked\n",
    "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
    "            taskElement.classList.toggle(\"expanded\");\n",
    "\n",
    "            // Add or remove highlight\n",
    "            let taskList = document.querySelectorAll(\".task\");\n",
    "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
    "\n",
    "            taskElement.classList.add(\"highlighted\");\n",
    "        }\n",
    "\n",
    "        // Listen for changes in the sort or filter controls\n",
    "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "i2YmAA4zszIR",
    "outputId": "9c4f6896-9122-4393-9510-ccec630a0029"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Responsive Task List</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "        .high-priority {\n",
       "            background-color: #f87171;\n",
       "        }\n",
       "        .medium-priority {\n",
       "            background-color: #fbbf24;\n",
       "        }\n",
       "        .low-priority {\n",
       "            background-color: #34d399;\n",
       "        }\n",
       "        .highlighted {\n",
       "            border: 2px solid #4CAF50;\n",
       "            background-color: #f0fff4;\n",
       "        }\n",
       "        .expanded {\n",
       "            background-color: #f9fafb;\n",
       "        }\n",
       "        /* Task Details Visibility for Small Screens */\n",
       "        .task-details {\n",
       "            display: none;\n",
       "        }\n",
       "        @media (min-width: 640px) {\n",
       "            .task-details {\n",
       "                display: block;\n",
       "            }\n",
       "        }\n",
       "        /* Responsive Layout */\n",
       "        .task-container {\n",
       "            display: flex;\n",
       "            flex-direction: column;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
       "\n",
       "        <!-- Sorting and Filtering Controls -->\n",
       "        <div class=\"mb-6\">\n",
       "            <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n",
       "                <!-- Sort by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
       "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
       "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
       "                        <option value=\"priority\">Priority</option>\n",
       "                        <option value=\"status\">Status</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <!-- Filter by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
       "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"low\">Low</option>\n",
       "                        <option value=\"medium\">Medium</option>\n",
       "                        <option value=\"high\">High</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
       "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"new\">New</option>\n",
       "                        <option value=\"in-progress\">In Progress</option>\n",
       "                        <option value=\"completed\">Completed</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "            </div>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"space-y-4\">\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"p-2 border rounded-md\" required>\n",
       "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border rounded-md\" required>\n",
       "            </div>\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <select id=\"priority-input\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
       "                    <option value=\"low\">Low Priority</option>\n",
       "                    <option value=\"medium\">Medium Priority</option>\n",
       "                    <option value=\"high\">High Priority</option>\n",
       "                </select>\n",
       "                <select id=\"status-input\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
       "                    <option value=\"new\">New</option>\n",
       "                    <option value=\"in-progress\">In Progress</option>\n",
       "                    <option value=\"completed\">Completed</option>\n",
       "                </select>\n",
       "            </div>\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-md w-full sm:w-auto\" required>\n",
       "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
       "            </div>\n",
       "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 sm:w-auto\">\n",
       "                Add Task\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-4 mt-6 overflow-auto max-h-96\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "        let selectedTaskId = null; // To track selected task for expanded view\n",
       "\n",
       "        function addTask() {\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            // Validate the inputs\n",
       "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
       "                alert(\"Please fill in all required fields.\");\n",
       "                return;\n",
       "            }\n",
       "\n",
       "            let taskId = Date.now(); // Unique task ID\n",
       "            let task = {\n",
       "                id: taskId,\n",
       "                name: taskName,\n",
       "                deadline: new Date(deadline),\n",
       "                priority: priority,\n",
       "                status: status,\n",
       "                estimatedTime: estimatedTime,\n",
       "                notes: notes\n",
       "            };\n",
       "            tasks.push(task);\n",
       "\n",
       "            // Clear input fields\n",
       "            document.getElementById(\"task-input\").value = \"\";\n",
       "            document.getElementById(\"deadline-input\").value = \"\";\n",
       "            document.getElementById(\"priority-input\").value = \"low\";\n",
       "            document.getElementById(\"status-input\").value = \"new\";\n",
       "            document.getElementById(\"time-input\").value = \"\";\n",
       "            document.getElementById(\"notes-input\").value = \"\";\n",
       "\n",
       "            // Render tasks again\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function editTask(taskId) {\n",
       "            // Find the task to edit\n",
       "            let task = tasks.find(task => task.id === taskId);\n",
       "            if (!task) return;\n",
       "\n",
       "            // Set input fields to the task's current values\n",
       "            document.getElementById(\"task-input\").value = task.name;\n",
       "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
       "            document.getElementById(\"priority-input\").value = task.priority;\n",
       "            document.getElementById(\"status-input\").value = task.status;\n",
       "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
       "            document.getElementById(\"notes-input\").value = task.notes;\n",
       "\n",
       "            // Set the task id to be edited\n",
       "            selectedTaskId = taskId;\n",
       "        }\n",
       "\n",
       "        function updateTask() {\n",
       "            // Get the updated task details from input fields\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            if (!selectedTaskId) return;\n",
       "\n",
       "            // Find and update the selected task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === selectedTaskId) {\n",
       "                    task.name = taskName;\n",
       "                    task.deadline = new Date(deadline);\n",
       "                    task.priority = priority;\n",
       "                    task.status = status;\n",
       "                    task.estimatedTime = estimatedTime;\n",
       "                    task.notes = notes;\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            selectedTaskId = null; // Reset the selected task ID\n",
       "\n",
       "            // Render tasks after update\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function renderTasks() {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            tasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
       "\n",
       "                // Task name\n",
       "                let taskNameElement = document.createElement(\"span\");\n",
       "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
       "                taskNameElement.textContent = task.name;\n",
       "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
       "\n",
       "                // Task details\n",
       "                let taskDetailsElement = document.createElement(\"div\");\n",
       "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2 task-details\";\n",
       "                let deadlineElement = document.createElement(\"div\");\n",
       "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
       "                taskDetailsElement.appendChild(deadlineElement);\n",
       "\n",
       "                let priorityElement = document.createElement(\"div\");\n",
       "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(priorityElement);\n",
       "\n",
       "                let timeElement = document.createElement(\"div\");\n",
       "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
       "                taskDetailsElement.appendChild(timeElement);\n",
       "\n",
       "                let statusElement = document.createElement(\"div\");\n",
       "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(statusElement);\n",
       "\n",
       "                if (task.notes) {\n",
       "                    let notesElement = document.createElement(\"div\");\n",
       "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
       "                    taskDetailsElement.appendChild(notesElement);\n",
       "                }\n",
       "\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "\n",
       "                // Append elements to task container\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "\n",
       "        function expandTaskDetails(taskId) {\n",
       "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
       "            taskElement.classList.toggle(\"expanded\");\n",
       "\n",
       "            // Add or remove highlight\n",
       "            let taskList = document.querySelectorAll(\".task\");\n",
       "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
       "\n",
       "            taskElement.classList.add(\"highlighted\");\n",
       "        }\n",
       "\n",
       "        // Listen for changes in the sort or filter controls\n",
       "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
       "            renderTasks();\n",
       "        });\n",
       "\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List with Interactive Details and Responsive Design\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Responsive Task List</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "        .high-priority {\n",
    "            background-color: #f87171;\n",
    "        }\n",
    "        .medium-priority {\n",
    "            background-color: #fbbf24;\n",
    "        }\n",
    "        .low-priority {\n",
    "            background-color: #34d399;\n",
    "        }\n",
    "        .highlighted {\n",
    "            border: 2px solid #4CAF50;\n",
    "            background-color: #f0fff4;\n",
    "        }\n",
    "        .expanded {\n",
    "            background-color: #f9fafb;\n",
    "        }\n",
    "        /* Task Details Visibility for Small Screens */\n",
    "        .task-details {\n",
    "            display: none;\n",
    "        }\n",
    "        @media (min-width: 640px) {\n",
    "            .task-details {\n",
    "                display: block;\n",
    "            }\n",
    "        }\n",
    "        /* Responsive Layout */\n",
    "        .task-container {\n",
    "            display: flex;\n",
    "            flex-direction: column;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\">Task List</h2>\n",
    "\n",
    "        <!-- Sorting and Filtering Controls -->\n",
    "        <div class=\"mb-6\">\n",
    "            <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n",
    "                <!-- Sort by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
    "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
    "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
    "                        <option value=\"priority\">Priority</option>\n",
    "                        <option value=\"status\">Status</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <!-- Filter by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
    "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"low\">Low</option>\n",
    "                        <option value=\"medium\">Medium</option>\n",
    "                        <option value=\"high\">High</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
    "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"new\">New</option>\n",
    "                        <option value=\"in-progress\">In Progress</option>\n",
    "                        <option value=\"completed\">Completed</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "            </div>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"space-y-4\">\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"p-2 border rounded-md\" required>\n",
    "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border rounded-md\" required>\n",
    "            </div>\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <select id=\"priority-input\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
    "                    <option value=\"low\">Low Priority</option>\n",
    "                    <option value=\"medium\">Medium Priority</option>\n",
    "                    <option value=\"high\">High Priority</option>\n",
    "                </select>\n",
    "                <select id=\"status-input\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
    "                    <option value=\"new\">New</option>\n",
    "                    <option value=\"in-progress\">In Progress</option>\n",
    "                    <option value=\"completed\">Completed</option>\n",
    "                </select>\n",
    "            </div>\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-md w-full sm:w-auto\" required>\n",
    "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"p-2 border rounded-md w-full sm:w-auto\">\n",
    "            </div>\n",
    "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 sm:w-auto\">\n",
    "                Add Task\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-4 mt-6 overflow-auto max-h-96\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "        let selectedTaskId = null; // To track selected task for expanded view\n",
    "\n",
    "        function addTask() {\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            // Validate the inputs\n",
    "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
    "                alert(\"Please fill in all required fields.\");\n",
    "                return;\n",
    "            }\n",
    "\n",
    "            let taskId = Date.now(); // Unique task ID\n",
    "            let task = {\n",
    "                id: taskId,\n",
    "                name: taskName,\n",
    "                deadline: new Date(deadline),\n",
    "                priority: priority,\n",
    "                status: status,\n",
    "                estimatedTime: estimatedTime,\n",
    "                notes: notes\n",
    "            };\n",
    "            tasks.push(task);\n",
    "\n",
    "            // Clear input fields\n",
    "            document.getElementById(\"task-input\").value = \"\";\n",
    "            document.getElementById(\"deadline-input\").value = \"\";\n",
    "            document.getElementById(\"priority-input\").value = \"low\";\n",
    "            document.getElementById(\"status-input\").value = \"new\";\n",
    "            document.getElementById(\"time-input\").value = \"\";\n",
    "            document.getElementById(\"notes-input\").value = \"\";\n",
    "\n",
    "            // Render tasks again\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function editTask(taskId) {\n",
    "            // Find the task to edit\n",
    "            let task = tasks.find(task => task.id === taskId);\n",
    "            if (!task) return;\n",
    "\n",
    "            // Set input fields to the task's current values\n",
    "            document.getElementById(\"task-input\").value = task.name;\n",
    "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
    "            document.getElementById(\"priority-input\").value = task.priority;\n",
    "            document.getElementById(\"status-input\").value = task.status;\n",
    "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
    "            document.getElementById(\"notes-input\").value = task.notes;\n",
    "\n",
    "            // Set the task id to be edited\n",
    "            selectedTaskId = taskId;\n",
    "        }\n",
    "\n",
    "        function updateTask() {\n",
    "            // Get the updated task details from input fields\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            if (!selectedTaskId) return;\n",
    "\n",
    "            // Find and update the selected task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === selectedTaskId) {\n",
    "                    task.name = taskName;\n",
    "                    task.deadline = new Date(deadline);\n",
    "                    task.priority = priority;\n",
    "                    task.status = status;\n",
    "                    task.estimatedTime = estimatedTime;\n",
    "                    task.notes = notes;\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            selectedTaskId = null; // Reset the selected task ID\n",
    "\n",
    "            // Render tasks after update\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function renderTasks() {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            tasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
    "\n",
    "                // Task name\n",
    "                let taskNameElement = document.createElement(\"span\");\n",
    "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
    "                taskNameElement.textContent = task.name;\n",
    "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
    "\n",
    "                // Task details\n",
    "                let taskDetailsElement = document.createElement(\"div\");\n",
    "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2 task-details\";\n",
    "                let deadlineElement = document.createElement(\"div\");\n",
    "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
    "                taskDetailsElement.appendChild(deadlineElement);\n",
    "\n",
    "                let priorityElement = document.createElement(\"div\");\n",
    "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(priorityElement);\n",
    "\n",
    "                let timeElement = document.createElement(\"div\");\n",
    "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
    "                taskDetailsElement.appendChild(timeElement);\n",
    "\n",
    "                let statusElement = document.createElement(\"div\");\n",
    "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(statusElement);\n",
    "\n",
    "                if (task.notes) {\n",
    "                    let notesElement = document.createElement(\"div\");\n",
    "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
    "                    taskDetailsElement.appendChild(notesElement);\n",
    "                }\n",
    "\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "\n",
    "                // Append elements to task container\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "\n",
    "        function expandTaskDetails(taskId) {\n",
    "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
    "            taskElement.classList.toggle(\"expanded\");\n",
    "\n",
    "            // Add or remove highlight\n",
    "            let taskList = document.querySelectorAll(\".task\");\n",
    "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
    "\n",
    "            taskElement.classList.add(\"highlighted\");\n",
    "        }\n",
    "\n",
    "        // Listen for changes in the sort or filter controls\n",
    "        document.getElementById(\"sort-by\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-priority\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "        document.getElementById(\"filter-status\").addEventListener(\"change\", () => {\n",
    "            renderTasks();\n",
    "        });\n",
    "\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 416
    },
    "id": "5iTfAA2nty-R",
    "outputId": "7dc526ad-9d6f-4e37-9122-93f73afe108a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "<!DOCTYPE html>\n",
       "<html lang=\"en\">\n",
       "<head>\n",
       "    <meta charset=\"UTF-8\">\n",
       "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
       "    <title>Responsive Task List</title>\n",
       "    <!-- Include Tailwind CSS from CDN -->\n",
       "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
       "    <style>\n",
       "        .completed {\n",
       "            text-decoration: line-through;\n",
       "            color: gray;\n",
       "        }\n",
       "        .high-priority {\n",
       "            background-color: #f87171;\n",
       "        }\n",
       "        .medium-priority {\n",
       "            background-color: #fbbf24;\n",
       "        }\n",
       "        .low-priority {\n",
       "            background-color: #34d399;\n",
       "        }\n",
       "        .highlighted {\n",
       "            border: 2px solid #4CAF50;\n",
       "            background-color: #f0fff4;\n",
       "        }\n",
       "        .expanded {\n",
       "            background-color: #f9fafb;\n",
       "        }\n",
       "        /* Task Details Visibility for Small Screens */\n",
       "        .task-details {\n",
       "            display: none;\n",
       "        }\n",
       "        @media (min-width: 640px) {\n",
       "            .task-details {\n",
       "                display: block;\n",
       "            }\n",
       "        }\n",
       "        /* Responsive Layout */\n",
       "        .task-container {\n",
       "            display: flex;\n",
       "            flex-direction: column;\n",
       "        }\n",
       "        .focus-ring:focus {\n",
       "            outline: 3px solid #4CAF50;\n",
       "        }\n",
       "    </style>\n",
       "</head>\n",
       "<body class=\"bg-gray-100 py-6\">\n",
       "\n",
       "    <!-- Task List Container -->\n",
       "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\" role=\"main\">\n",
       "        <h2 class=\"text-2xl font-bold mb-4 text-center\" id=\"task-list-title\">Task List</h2>\n",
       "\n",
       "        <!-- Sorting and Filtering Controls -->\n",
       "        <div class=\"mb-6\" role=\"form\">\n",
       "            <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n",
       "                <!-- Sort by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
       "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\" aria-labelledby=\"sort-by\" aria-live=\"polite\">\n",
       "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
       "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
       "                        <option value=\"priority\">Priority</option>\n",
       "                        <option value=\"status\">Status</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <!-- Filter by -->\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
       "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"low\">Low</option>\n",
       "                        <option value=\"medium\">Medium</option>\n",
       "                        <option value=\"high\">High</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "                <div class=\"flex-1\">\n",
       "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
       "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\">\n",
       "                        <option value=\"all\">All</option>\n",
       "                        <option value=\"new\">New</option>\n",
       "                        <option value=\"in-progress\">In Progress</option>\n",
       "                        <option value=\"completed\">Completed</option>\n",
       "                    </select>\n",
       "                </div>\n",
       "            </div>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task Input Form -->\n",
       "        <div class=\"space-y-4\">\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"p-2 border rounded-md\" aria-label=\"Task name\" required>\n",
       "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border rounded-md\" aria-label=\"Deadline\" required>\n",
       "            </div>\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <select id=\"priority-input\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Priority level\">\n",
       "                    <option value=\"low\">Low Priority</option>\n",
       "                    <option value=\"medium\">Medium Priority</option>\n",
       "                    <option value=\"high\">High Priority</option>\n",
       "                </select>\n",
       "                <select id=\"status-input\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Task status\">\n",
       "                    <option value=\"new\">New</option>\n",
       "                    <option value=\"in-progress\">In Progress</option>\n",
       "                    <option value=\"completed\">Completed</option>\n",
       "                </select>\n",
       "            </div>\n",
       "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
       "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Estimated time\" required>\n",
       "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Additional task notes\">\n",
       "            </div>\n",
       "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 sm:w-auto focus:ring-2 focus:ring-green-500 focus:outline-none\" aria-label=\"Add new task\">\n",
       "                Add Task\n",
       "            </button>\n",
       "        </div>\n",
       "\n",
       "        <!-- Task List -->\n",
       "        <div id=\"task-list\" class=\"space-y-4 mt-6 overflow-auto max-h-96\" role=\"list\" aria-live=\"polite\">\n",
       "            <!-- Tasks will be dynamically added here -->\n",
       "        </div>\n",
       "    </div>\n",
       "\n",
       "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
       "    <script>\n",
       "        let tasks = []; // Array to store tasks\n",
       "        let selectedTaskId = null; // To track selected task for expanded view\n",
       "\n",
       "        function addTask() {\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            // Validate the inputs\n",
       "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
       "                alert(\"Please fill in all required fields.\");\n",
       "                return;\n",
       "            }\n",
       "\n",
       "            let taskId = Date.now(); // Unique task ID\n",
       "            let task = {\n",
       "                id: taskId,\n",
       "                name: taskName,\n",
       "                deadline: new Date(deadline),\n",
       "                priority: priority,\n",
       "                status: status,\n",
       "                estimatedTime: estimatedTime,\n",
       "                notes: notes\n",
       "            };\n",
       "            tasks.push(task);\n",
       "\n",
       "            // Clear input fields\n",
       "            document.getElementById(\"task-input\").value = \"\";\n",
       "            document.getElementById(\"deadline-input\").value = \"\";\n",
       "            document.getElementById(\"priority-input\").value = \"low\";\n",
       "            document.getElementById(\"status-input\").value = \"new\";\n",
       "            document.getElementById(\"time-input\").value = \"\";\n",
       "            document.getElementById(\"notes-input\").value = \"\";\n",
       "\n",
       "            // Render tasks again\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function toggleTaskCompletion(taskId) {\n",
       "            // Toggle the completion status of the task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === taskId) {\n",
       "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            renderTasks(); // Re-render tasks after toggling completion\n",
       "        }\n",
       "\n",
       "        function editTask(taskId) {\n",
       "            // Find the task to edit\n",
       "            let task = tasks.find(task => task.id === taskId);\n",
       "            if (!task) return;\n",
       "\n",
       "            // Set input fields to the task's current values\n",
       "            document.getElementById(\"task-input\").value = task.name;\n",
       "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
       "            document.getElementById(\"priority-input\").value = task.priority;\n",
       "            document.getElementById(\"status-input\").value = task.status;\n",
       "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
       "            document.getElementById(\"notes-input\").value = task.notes;\n",
       "\n",
       "            // Set the task id to be edited\n",
       "            selectedTaskId = taskId;\n",
       "        }\n",
       "\n",
       "        function updateTask() {\n",
       "            // Get the updated task details from input fields\n",
       "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
       "            let deadline = document.getElementById(\"deadline-input\").value;\n",
       "            let priority = document.getElementById(\"priority-input\").value;\n",
       "            let status = document.getElementById(\"status-input\").value;\n",
       "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
       "            let notes = document.getElementById(\"notes-input\").value;\n",
       "\n",
       "            if (!selectedTaskId) return;\n",
       "\n",
       "            // Find and update the selected task\n",
       "            tasks = tasks.map(task => {\n",
       "                if (task.id === selectedTaskId) {\n",
       "                    task.name = taskName;\n",
       "                    task.deadline = new Date(deadline);\n",
       "                    task.priority = priority;\n",
       "                    task.status = status;\n",
       "                    task.estimatedTime = estimatedTime;\n",
       "                    task.notes = notes;\n",
       "                }\n",
       "                return task;\n",
       "            });\n",
       "\n",
       "            selectedTaskId = null; // Reset the selected task ID\n",
       "\n",
       "            // Render tasks after update\n",
       "            renderTasks();\n",
       "        }\n",
       "\n",
       "        function renderTasks() {\n",
       "            let taskListDiv = document.getElementById(\"task-list\");\n",
       "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
       "\n",
       "            tasks.forEach(task => {\n",
       "                let taskElement = document.createElement(\"div\");\n",
       "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
       "                taskElement.setAttribute(\"role\", \"listitem\");\n",
       "                taskElement.setAttribute(\"aria-labelledby\", `task-${task.id}-name`);\n",
       "                taskElement.setAttribute(\"tabindex\", \"0\");  // Allow focus via keyboard navigation\n",
       "\n",
       "                // Task name\n",
       "                let taskNameElement = document.createElement(\"span\");\n",
       "                taskNameElement.setAttribute(\"id\", `task-${task.id}-name`);\n",
       "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
       "                taskNameElement.textContent = task.name;\n",
       "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
       "\n",
       "                // Task details\n",
       "                let taskDetailsElement = document.createElement(\"div\");\n",
       "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2 task-details\";\n",
       "                let deadlineElement = document.createElement(\"div\");\n",
       "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
       "                taskDetailsElement.appendChild(deadlineElement);\n",
       "\n",
       "                let priorityElement = document.createElement(\"div\");\n",
       "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(priorityElement);\n",
       "\n",
       "                let timeElement = document.createElement(\"div\");\n",
       "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
       "                taskDetailsElement.appendChild(timeElement);\n",
       "\n",
       "                let statusElement = document.createElement(\"div\");\n",
       "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
       "                taskDetailsElement.appendChild(statusElement);\n",
       "\n",
       "                if (task.notes) {\n",
       "                    let notesElement = document.createElement(\"div\");\n",
       "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
       "                    taskDetailsElement.appendChild(notesElement);\n",
       "                }\n",
       "\n",
       "                taskElement.appendChild(taskDetailsElement);\n",
       "\n",
       "                // Append elements to task container\n",
       "                taskListDiv.appendChild(taskElement);\n",
       "            });\n",
       "        }\n",
       "\n",
       "        function expandTaskDetails(taskId) {\n",
       "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
       "            taskElement.classList.toggle(\"expanded\");\n",
       "\n",
       "            // Add or remove highlight\n",
       "            let taskList = document.querySelectorAll(\".task\");\n",
       "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
       "\n",
       "            taskElement.classList.add(\"highlighted\");\n",
       "        }\n",
       "\n",
       "    </script>\n",
       "</body>\n",
       "</html>\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML, Javascript\n",
    "\n",
    "# HTML, CSS, and JavaScript for Task List with Interactive Details, Responsive Design, and Accessibility\n",
    "html_code = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Responsive Task List</title>\n",
    "    <!-- Include Tailwind CSS from CDN -->\n",
    "    <script src=\"https://cdn.tailwindcss.com\"></script>\n",
    "    <style>\n",
    "        .completed {\n",
    "            text-decoration: line-through;\n",
    "            color: gray;\n",
    "        }\n",
    "        .high-priority {\n",
    "            background-color: #f87171;\n",
    "        }\n",
    "        .medium-priority {\n",
    "            background-color: #fbbf24;\n",
    "        }\n",
    "        .low-priority {\n",
    "            background-color: #34d399;\n",
    "        }\n",
    "        .highlighted {\n",
    "            border: 2px solid #4CAF50;\n",
    "            background-color: #f0fff4;\n",
    "        }\n",
    "        .expanded {\n",
    "            background-color: #f9fafb;\n",
    "        }\n",
    "        /* Task Details Visibility for Small Screens */\n",
    "        .task-details {\n",
    "            display: none;\n",
    "        }\n",
    "        @media (min-width: 640px) {\n",
    "            .task-details {\n",
    "                display: block;\n",
    "            }\n",
    "        }\n",
    "        /* Responsive Layout */\n",
    "        .task-container {\n",
    "            display: flex;\n",
    "            flex-direction: column;\n",
    "        }\n",
    "        .focus-ring:focus {\n",
    "            outline: 3px solid #4CAF50;\n",
    "        }\n",
    "    </style>\n",
    "</head>\n",
    "<body class=\"bg-gray-100 py-6\">\n",
    "\n",
    "    <!-- Task List Container -->\n",
    "    <div class=\"max-w-3xl mx-auto bg-white p-6 rounded-lg shadow-lg\" role=\"main\">\n",
    "        <h2 class=\"text-2xl font-bold mb-4 text-center\" id=\"task-list-title\">Task List</h2>\n",
    "\n",
    "        <!-- Sorting and Filtering Controls -->\n",
    "        <div class=\"mb-6\" role=\"form\">\n",
    "            <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n",
    "                <!-- Sort by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"sort-by\" class=\"block text-sm font-medium text-gray-700\">Sort by:</label>\n",
    "                    <select id=\"sort-by\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\" aria-labelledby=\"sort-by\" aria-live=\"polite\">\n",
    "                        <option value=\"deadline-asc\">Deadline (ascending)</option>\n",
    "                        <option value=\"deadline-desc\">Deadline (descending)</option>\n",
    "                        <option value=\"priority\">Priority</option>\n",
    "                        <option value=\"status\">Status</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <!-- Filter by -->\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-priority\" class=\"block text-sm font-medium text-gray-700\">Filter by Priority:</label>\n",
    "                    <select id=\"filter-priority\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"low\">Low</option>\n",
    "                        <option value=\"medium\">Medium</option>\n",
    "                        <option value=\"high\">High</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "                <div class=\"flex-1\">\n",
    "                    <label for=\"filter-status\" class=\"block text-sm font-medium text-gray-700\">Filter by Status:</label>\n",
    "                    <select id=\"filter-status\" class=\"w-full p-2 border rounded-md focus:ring-2 focus:ring-green-500 focus:outline-none\">\n",
    "                        <option value=\"all\">All</option>\n",
    "                        <option value=\"new\">New</option>\n",
    "                        <option value=\"in-progress\">In Progress</option>\n",
    "                        <option value=\"completed\">Completed</option>\n",
    "                    </select>\n",
    "                </div>\n",
    "            </div>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task Input Form -->\n",
    "        <div class=\"space-y-4\">\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <input id=\"task-input\" type=\"text\" placeholder=\"Task name\" class=\"p-2 border rounded-md\" aria-label=\"Task name\" required>\n",
    "                <input id=\"deadline-input\" type=\"datetime-local\" class=\"p-2 border rounded-md\" aria-label=\"Deadline\" required>\n",
    "            </div>\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <select id=\"priority-input\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Priority level\">\n",
    "                    <option value=\"low\">Low Priority</option>\n",
    "                    <option value=\"medium\">Medium Priority</option>\n",
    "                    <option value=\"high\">High Priority</option>\n",
    "                </select>\n",
    "                <select id=\"status-input\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Task status\">\n",
    "                    <option value=\"new\">New</option>\n",
    "                    <option value=\"in-progress\">In Progress</option>\n",
    "                    <option value=\"completed\">Completed</option>\n",
    "                </select>\n",
    "            </div>\n",
    "            <div class=\"flex flex-col sm:flex-row sm:space-x-4\">\n",
    "                <input id=\"time-input\" type=\"number\" placeholder=\"Estimated time (hours)\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Estimated time\" required>\n",
    "                <input id=\"notes-input\" type=\"text\" placeholder=\"Task notes\" class=\"p-2 border rounded-md w-full sm:w-auto\" aria-label=\"Additional task notes\">\n",
    "            </div>\n",
    "            <button onclick=\"addTask()\" class=\"w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 sm:w-auto focus:ring-2 focus:ring-green-500 focus:outline-none\" aria-label=\"Add new task\">\n",
    "                Add Task\n",
    "            </button>\n",
    "        </div>\n",
    "\n",
    "        <!-- Task List -->\n",
    "        <div id=\"task-list\" class=\"space-y-4 mt-6 overflow-auto max-h-96\" role=\"list\" aria-live=\"polite\">\n",
    "            <!-- Tasks will be dynamically added here -->\n",
    "        </div>\n",
    "    </div>\n",
    "\n",
    "    <!-- JavaScript for Task Management, Sorting, Filtering, and Interaction -->\n",
    "    <script>\n",
    "        let tasks = []; // Array to store tasks\n",
    "        let selectedTaskId = null; // To track selected task for expanded view\n",
    "\n",
    "        function addTask() {\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            // Validate the inputs\n",
    "            if (taskName === \"\" || deadline === \"\" || estimatedTime === \"\") {\n",
    "                alert(\"Please fill in all required fields.\");\n",
    "                return;\n",
    "            }\n",
    "\n",
    "            let taskId = Date.now(); // Unique task ID\n",
    "            let task = {\n",
    "                id: taskId,\n",
    "                name: taskName,\n",
    "                deadline: new Date(deadline),\n",
    "                priority: priority,\n",
    "                status: status,\n",
    "                estimatedTime: estimatedTime,\n",
    "                notes: notes\n",
    "            };\n",
    "            tasks.push(task);\n",
    "\n",
    "            // Clear input fields\n",
    "            document.getElementById(\"task-input\").value = \"\";\n",
    "            document.getElementById(\"deadline-input\").value = \"\";\n",
    "            document.getElementById(\"priority-input\").value = \"low\";\n",
    "            document.getElementById(\"status-input\").value = \"new\";\n",
    "            document.getElementById(\"time-input\").value = \"\";\n",
    "            document.getElementById(\"notes-input\").value = \"\";\n",
    "\n",
    "            // Render tasks again\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function toggleTaskCompletion(taskId) {\n",
    "            // Toggle the completion status of the task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === taskId) {\n",
    "                    task.status = task.status === 'completed' ? 'in-progress' : 'completed';\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            renderTasks(); // Re-render tasks after toggling completion\n",
    "        }\n",
    "\n",
    "        function editTask(taskId) {\n",
    "            // Find the task to edit\n",
    "            let task = tasks.find(task => task.id === taskId);\n",
    "            if (!task) return;\n",
    "\n",
    "            // Set input fields to the task's current values\n",
    "            document.getElementById(\"task-input\").value = task.name;\n",
    "            document.getElementById(\"deadline-input\").value = task.deadline.toISOString().slice(0, 16);\n",
    "            document.getElementById(\"priority-input\").value = task.priority;\n",
    "            document.getElementById(\"status-input\").value = task.status;\n",
    "            document.getElementById(\"time-input\").value = task.estimatedTime;\n",
    "            document.getElementById(\"notes-input\").value = task.notes;\n",
    "\n",
    "            // Set the task id to be edited\n",
    "            selectedTaskId = taskId;\n",
    "        }\n",
    "\n",
    "        function updateTask() {\n",
    "            // Get the updated task details from input fields\n",
    "            let taskName = document.getElementById(\"task-input\").value.trim();\n",
    "            let deadline = document.getElementById(\"deadline-input\").value;\n",
    "            let priority = document.getElementById(\"priority-input\").value;\n",
    "            let status = document.getElementById(\"status-input\").value;\n",
    "            let estimatedTime = document.getElementById(\"time-input\").value;\n",
    "            let notes = document.getElementById(\"notes-input\").value;\n",
    "\n",
    "            if (!selectedTaskId) return;\n",
    "\n",
    "            // Find and update the selected task\n",
    "            tasks = tasks.map(task => {\n",
    "                if (task.id === selectedTaskId) {\n",
    "                    task.name = taskName;\n",
    "                    task.deadline = new Date(deadline);\n",
    "                    task.priority = priority;\n",
    "                    task.status = status;\n",
    "                    task.estimatedTime = estimatedTime;\n",
    "                    task.notes = notes;\n",
    "                }\n",
    "                return task;\n",
    "            });\n",
    "\n",
    "            selectedTaskId = null; // Reset the selected task ID\n",
    "\n",
    "            // Render tasks after update\n",
    "            renderTasks();\n",
    "        }\n",
    "\n",
    "        function renderTasks() {\n",
    "            let taskListDiv = document.getElementById(\"task-list\");\n",
    "            taskListDiv.innerHTML = \"\"; // Clear the task list\n",
    "\n",
    "            tasks.forEach(task => {\n",
    "                let taskElement = document.createElement(\"div\");\n",
    "                taskElement.className = `p-4 border rounded-md ${task.status === 'completed' ? 'bg-green-100' : 'bg-white'} ${task.priority === 'high' ? 'high-priority' : task.priority === 'medium' ? 'medium-priority' : 'low-priority'}`;\n",
    "                taskElement.setAttribute(\"role\", \"listitem\");\n",
    "                taskElement.setAttribute(\"aria-labelledby\", `task-${task.id}-name`);\n",
    "                taskElement.setAttribute(\"tabindex\", \"0\");  // Allow focus via keyboard navigation\n",
    "\n",
    "                // Task name\n",
    "                let taskNameElement = document.createElement(\"span\");\n",
    "                taskNameElement.setAttribute(\"id\", `task-${task.id}-name`);\n",
    "                taskNameElement.className = task.status === 'completed' ? 'completed' : '';\n",
    "                taskNameElement.textContent = task.name;\n",
    "                taskElement.onclick = () => expandTaskDetails(task.id);\n",
    "\n",
    "                // Task details\n",
    "                let taskDetailsElement = document.createElement(\"div\");\n",
    "                taskDetailsElement.className = \"text-sm text-gray-600 mt-2 task-details\";\n",
    "                let deadlineElement = document.createElement(\"div\");\n",
    "                deadlineElement.textContent = `Deadline: ${task.deadline.toLocaleString()}`;\n",
    "                taskDetailsElement.appendChild(deadlineElement);\n",
    "\n",
    "                let priorityElement = document.createElement(\"div\");\n",
    "                priorityElement.textContent = `Priority: ${task.priority.charAt(0).toUpperCase() + task.priority.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(priorityElement);\n",
    "\n",
    "                let timeElement = document.createElement(\"div\");\n",
    "                timeElement.textContent = `Estimated time: ${task.estimatedTime} hours`;\n",
    "                taskDetailsElement.appendChild(timeElement);\n",
    "\n",
    "                let statusElement = document.createElement(\"div\");\n",
    "                statusElement.textContent = `Status: ${task.status.charAt(0).toUpperCase() + task.status.slice(1)}`;\n",
    "                taskDetailsElement.appendChild(statusElement);\n",
    "\n",
    "                if (task.notes) {\n",
    "                    let notesElement = document.createElement(\"div\");\n",
    "                    notesElement.textContent = `Notes: ${task.notes}`;\n",
    "                    taskDetailsElement.appendChild(notesElement);\n",
    "                }\n",
    "\n",
    "                taskElement.appendChild(taskDetailsElement);\n",
    "\n",
    "                // Append elements to task container\n",
    "                taskListDiv.appendChild(taskElement);\n",
    "            });\n",
    "        }\n",
    "\n",
    "        function expandTaskDetails(taskId) {\n",
    "            let taskElement = document.querySelector(`#task-${taskId}`);\n",
    "            taskElement.classList.toggle(\"expanded\");\n",
    "\n",
    "            // Add or remove highlight\n",
    "            let taskList = document.querySelectorAll(\".task\");\n",
    "            taskList.forEach(task => task.classList.remove(\"highlighted\"));\n",
    "\n",
    "            taskElement.classList.add(\"highlighted\");\n",
    "        }\n",
    "\n",
    "    </script>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# Display the HTML, CSS, and JavaScript code\n",
    "display(HTML(html_code))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "DvEZDLnHvN9N",
    "outputId": "a137e454-e03d-41a6-fbb0-c76f0f4fe6c7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Task: Prepare for client meeting, Priority: high, Deadline: 2024-11-18 09:00:00\n",
      "Task: Complete the monthly report, Priority: high, Deadline: 2024-11-20 18:00:00\n",
      "Task: Reply to emails, Priority: medium, Deadline: 2024-11-19 12:00:00\n",
      "Task: Review team performance reports, Priority: low, Deadline: 2024-11-21 14:00:00\n",
      "Suggested Task: Prepare for client meeting - Urgent, Deadline in 2 day(s).\n",
      "Suggested Task: Reply to emails - Urgent, Deadline in 3 day(s).\n",
      "Suggested Task: Complete the monthly report - Urgent, Deadline in 4 day(s).\n",
      "Suggested Task: Review team performance reports - Urgent, Deadline in 5 day(s).\n"
     ]
    }
   ],
   "source": [
    "# Simulating a function to sort tasks by priority and deadline\n",
    "def sort_tasks_by_priority(tasks):\n",
    "    # Define priority order for sorting\n",
    "    priority_order = {\"high\": 1, \"medium\": 2, \"low\": 3}\n",
    "\n",
    "    # Sort tasks by priority first, then by deadline\n",
    "    return sorted(tasks, key=lambda x: (priority_order[x['priority']], x['deadline']))\n",
    "\n",
    "# Sample task data (in Python dictionary format)\n",
    "sample_tasks = [\n",
    "    {\"id\": 1, \"name\": \"Complete the monthly report\", \"deadline\": \"2024-11-20T18:00:00\", \"priority\": \"high\", \"status\": \"new\", \"estimatedTime\": 3, \"notes\": \"This task is critical for the end-of-month reporting.\"},\n",
    "    {\"id\": 2, \"name\": \"Reply to emails\", \"deadline\": \"2024-11-19T12:00:00\", \"priority\": \"medium\", \"status\": \"new\", \"estimatedTime\": 1, \"notes\": \"Routine task that needs to be done daily.\"},\n",
    "    {\"id\": 3, \"name\": \"Prepare for client meeting\", \"deadline\": \"2024-11-18T09:00:00\", \"priority\": \"high\", \"status\": \"new\", \"estimatedTime\": 2, \"notes\": \"Meeting preparation requires detailed planning.\"},\n",
    "    {\"id\": 4, \"name\": \"Review team performance reports\", \"deadline\": \"2024-11-21T14:00:00\", \"priority\": \"low\", \"status\": \"new\", \"estimatedTime\": 4, \"notes\": \"Performance review meeting will be scheduled later.\"}\n",
    "]\n",
    "\n",
    "# Convert deadlines from string to datetime for proper comparison\n",
    "from datetime import datetime\n",
    "for task in sample_tasks:\n",
    "    task['deadline'] = datetime.fromisoformat(task['deadline'])\n",
    "\n",
    "# Sort tasks by priority and deadline\n",
    "sorted_tasks = sort_tasks_by_priority(sample_tasks)\n",
    "\n",
    "# Output the sorted tasks\n",
    "for task in sorted_tasks:\n",
    "    print(f\"Task: {task['name']}, Priority: {task['priority']}, Deadline: {task['deadline']}\")\n",
    "\n",
    "# Sample Suggestion Test (Task Suggestions based on priority and deadline)\n",
    "def get_task_suggestions(tasks):\n",
    "    # Filter tasks that are not completed and sort them by deadline\n",
    "    return sorted(\n",
    "        [task for task in tasks if task['status'] != 'completed'],\n",
    "        key=lambda x: x['deadline']\n",
    "    )\n",
    "\n",
    "# Get suggestions\n",
    "suggestions = get_task_suggestions(sample_tasks)\n",
    "for suggestion in suggestions:\n",
    "    days_left = (suggestion['deadline'] - datetime.now()).days\n",
    "    print(f\"Suggested Task: {suggestion['name']} - Urgent, Deadline in {days_left} day(s).\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xmWoTQIIxsUn",
    "outputId": "bb8e5dab-0696-49f9-c4bc-71962230b221"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: google-auth in /usr/local/lib/python3.10/dist-packages (2.27.0)\n",
      "Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.10/dist-packages (1.2.1)\n",
      "Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.10/dist-packages (0.2.0)\n",
      "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (2.151.0)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth) (5.5.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth) (0.4.1)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth) (4.9)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib) (1.3.1)\n",
      "Requirement already satisfied: httplib2>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-httplib2) (0.22.0)\n",
      "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.19.2)\n",
      "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (4.1.1)\n",
      "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.66.0)\n",
      "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (4.25.5)\n",
      "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.25.0)\n",
      "Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.32.3)\n",
      "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2>=0.19.0->google-auth-httplib2) (3.2.0)\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth) (0.6.1)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.2.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.4.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.2.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2024.8.30)\n"
     ]
    }
   ],
   "source": [
    "pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 73
    },
    "id": "M6KClBhDzmxX",
    "outputId": "bacdd96f-98f8-4f58-b5c8-6d79e16dd0d1"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "     <input type=\"file\" id=\"files-5ce3254d-0cf2-472e-be5f-ca9ca175e1db\" name=\"files[]\" multiple disabled\n",
       "        style=\"border:none\" />\n",
       "     <output id=\"result-5ce3254d-0cf2-472e-be5f-ca9ca175e1db\">\n",
       "      Upload widget is only available when the cell has been executed in the\n",
       "      current browser session. Please rerun this cell to enable.\n",
       "      </output>\n",
       "      <script>// Copyright 2017 Google LLC\n",
       "//\n",
       "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
       "// you may not use this file except in compliance with the License.\n",
       "// You may obtain a copy of the License at\n",
       "//\n",
       "//      http://www.apache.org/licenses/LICENSE-2.0\n",
       "//\n",
       "// Unless required by applicable law or agreed to in writing, software\n",
       "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
       "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
       "// See the License for the specific language governing permissions and\n",
       "// limitations under the License.\n",
       "\n",
       "/**\n",
       " * @fileoverview Helpers for google.colab Python module.\n",
       " */\n",
       "(function(scope) {\n",
       "function span(text, styleAttributes = {}) {\n",
       "  const element = document.createElement('span');\n",
       "  element.textContent = text;\n",
       "  for (const key of Object.keys(styleAttributes)) {\n",
       "    element.style[key] = styleAttributes[key];\n",
       "  }\n",
       "  return element;\n",
       "}\n",
       "\n",
       "// Max number of bytes which will be uploaded at a time.\n",
       "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
       "\n",
       "function _uploadFiles(inputId, outputId) {\n",
       "  const steps = uploadFilesStep(inputId, outputId);\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  // Cache steps on the outputElement to make it available for the next call\n",
       "  // to uploadFilesContinue from Python.\n",
       "  outputElement.steps = steps;\n",
       "\n",
       "  return _uploadFilesContinue(outputId);\n",
       "}\n",
       "\n",
       "// This is roughly an async generator (not supported in the browser yet),\n",
       "// where there are multiple asynchronous steps and the Python side is going\n",
       "// to poll for completion of each step.\n",
       "// This uses a Promise to block the python side on completion of each step,\n",
       "// then passes the result of the previous step as the input to the next step.\n",
       "function _uploadFilesContinue(outputId) {\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  const steps = outputElement.steps;\n",
       "\n",
       "  const next = steps.next(outputElement.lastPromiseValue);\n",
       "  return Promise.resolve(next.value.promise).then((value) => {\n",
       "    // Cache the last promise value to make it available to the next\n",
       "    // step of the generator.\n",
       "    outputElement.lastPromiseValue = value;\n",
       "    return next.value.response;\n",
       "  });\n",
       "}\n",
       "\n",
       "/**\n",
       " * Generator function which is called between each async step of the upload\n",
       " * process.\n",
       " * @param {string} inputId Element ID of the input file picker element.\n",
       " * @param {string} outputId Element ID of the output display.\n",
       " * @return {!Iterable<!Object>} Iterable of next steps.\n",
       " */\n",
       "function* uploadFilesStep(inputId, outputId) {\n",
       "  const inputElement = document.getElementById(inputId);\n",
       "  inputElement.disabled = false;\n",
       "\n",
       "  const outputElement = document.getElementById(outputId);\n",
       "  outputElement.innerHTML = '';\n",
       "\n",
       "  const pickedPromise = new Promise((resolve) => {\n",
       "    inputElement.addEventListener('change', (e) => {\n",
       "      resolve(e.target.files);\n",
       "    });\n",
       "  });\n",
       "\n",
       "  const cancel = document.createElement('button');\n",
       "  inputElement.parentElement.appendChild(cancel);\n",
       "  cancel.textContent = 'Cancel upload';\n",
       "  const cancelPromise = new Promise((resolve) => {\n",
       "    cancel.onclick = () => {\n",
       "      resolve(null);\n",
       "    };\n",
       "  });\n",
       "\n",
       "  // Wait for the user to pick the files.\n",
       "  const files = yield {\n",
       "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
       "    response: {\n",
       "      action: 'starting',\n",
       "    }\n",
       "  };\n",
       "\n",
       "  cancel.remove();\n",
       "\n",
       "  // Disable the input element since further picks are not allowed.\n",
       "  inputElement.disabled = true;\n",
       "\n",
       "  if (!files) {\n",
       "    return {\n",
       "      response: {\n",
       "        action: 'complete',\n",
       "      }\n",
       "    };\n",
       "  }\n",
       "\n",
       "  for (const file of files) {\n",
       "    const li = document.createElement('li');\n",
       "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
       "    li.append(span(\n",
       "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
       "        `last modified: ${\n",
       "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
       "                                    'n/a'} - `));\n",
       "    const percent = span('0% done');\n",
       "    li.appendChild(percent);\n",
       "\n",
       "    outputElement.appendChild(li);\n",
       "\n",
       "    const fileDataPromise = new Promise((resolve) => {\n",
       "      const reader = new FileReader();\n",
       "      reader.onload = (e) => {\n",
       "        resolve(e.target.result);\n",
       "      };\n",
       "      reader.readAsArrayBuffer(file);\n",
       "    });\n",
       "    // Wait for the data to be ready.\n",
       "    let fileData = yield {\n",
       "      promise: fileDataPromise,\n",
       "      response: {\n",
       "        action: 'continue',\n",
       "      }\n",
       "    };\n",
       "\n",
       "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
       "    let position = 0;\n",
       "    do {\n",
       "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
       "      const chunk = new Uint8Array(fileData, position, length);\n",
       "      position += length;\n",
       "\n",
       "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
       "      yield {\n",
       "        response: {\n",
       "          action: 'append',\n",
       "          file: file.name,\n",
       "          data: base64,\n",
       "        },\n",
       "      };\n",
       "\n",
       "      let percentDone = fileData.byteLength === 0 ?\n",
       "          100 :\n",
       "          Math.round((position / fileData.byteLength) * 100);\n",
       "      percent.textContent = `${percentDone}% done`;\n",
       "\n",
       "    } while (position < fileData.byteLength);\n",
       "  }\n",
       "\n",
       "  // All done.\n",
       "  yield {\n",
       "    response: {\n",
       "      action: 'complete',\n",
       "    }\n",
       "  };\n",
       "}\n",
       "\n",
       "scope.google = scope.google || {};\n",
       "scope.google.colab = scope.google.colab || {};\n",
       "scope.google.colab._files = {\n",
       "  _uploadFiles,\n",
       "  _uploadFilesContinue,\n",
       "};\n",
       "})(self);\n",
       "</script> "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving client_secrets.json to client_secrets.json\n"
     ]
    }
   ],
   "source": [
    "from google.colab import files\n",
    "uploaded = files.upload()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "g_qQIgc4zuje",
    "outputId": "a52be919-ae18-4fe7-85fc-ecf934059906"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.config', 'client_secrets.json', 'sample_data']"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.listdir()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 211
    },
    "id": "e8hpYPcb0HEp",
    "outputId": "fb7378c4-8232-4933-cf44-b5719b92ef01"
   },
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'InstalledAppFlow' object has no attribute 'run_console'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-740dde231f91>\u001b[0m in \u001b[0;36m<cell line: 14>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;31m# Use run_console instead of run_local_server to avoid opening a browser window\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m \u001b[0mcreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_console\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;31m# Save the credentials to a file so you don't need to authenticate again next time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'InstalledAppFlow' object has no attribute 'run_console'"
     ]
    }
   ],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "from googleapiclient.discovery import build\n",
    "from google.auth.transport.requests import Request\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Use run_console instead of run_local_server to avoid opening a browser window\n",
    "creds = flow.run_console()\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "bc_J3d_VHkR2",
    "outputId": "8b8573e9-20c2-457e-d114-e6e45d1246bc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: google-auth-oauthlib in /usr/local/lib/python3.10/dist-packages (1.2.1)\n",
      "Requirement already satisfied: google-auth-httplib2 in /usr/local/lib/python3.10/dist-packages (0.2.0)\n",
      "Requirement already satisfied: google-api-python-client in /usr/local/lib/python3.10/dist-packages (2.153.0)\n",
      "Requirement already satisfied: google-auth>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib) (2.27.0)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib) (1.3.1)\n",
      "Requirement already satisfied: httplib2>=0.19.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-httplib2) (0.22.0)\n",
      "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (2.19.2)\n",
      "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client) (4.1.1)\n",
      "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.66.0)\n",
      "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<6.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (4.25.5)\n",
      "Requirement already satisfied: proto-plus<2.0.0dev,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (1.25.0)\n",
      "Requirement already satisfied: requests<3.0.0.dev0,>=2.18.0 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.32.3)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (5.5.0)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (0.4.1)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=2.15.0->google-auth-oauthlib) (4.9)\n",
      "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2>=0.19.0->google-auth-httplib2) (3.2.0)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib) (3.2.2)\n",
      "Requirement already satisfied: pyasn1<0.7.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=2.15.0->google-auth-oauthlib) (0.6.1)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.4.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2.2.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0.dev0,>=2.18.0->google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0.dev0,>=1.31.5->google-api-python-client) (2024.8.30)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade google-auth-oauthlib google-auth-httplib2 google-api-python-client"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "WYWaArnuHnSI"
   },
   "outputs": [],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "from googleapiclient.discovery import build\n",
    "from google.auth.transport.requests import Request\n",
    "import os\n",
    "import pickle\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Use run_local_server if run_console is not available\n",
    "# and save credentials for future use\n",
    "credentials_file = 'token.pickle'\n",
    "if os.path.exists(credentials_file):\n",
    "    with open(credentials_file, 'rb') as token:\n",
    "        creds = pickle.load(token)\n",
    "else:\n",
    "    creds = flow.run_local_server(port=0)\n",
    "    with open(credentials_file, 'wb') as token:\n",
    "        pickle.dump(creds, token)\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xor9mVn50qbl",
    "outputId": "6e61b4d4-b3c3-45d8-f7df-db566d7a5204"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please go to this URL: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=312029262535-5986rptnn28n07kglplloiio9lmtjcqm.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&state=1kx8qsb50lL7Pl8EUDuMnJCPnc4gsw&access_type=offline&prompt=consent\n"
     ]
    }
   ],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Get the authorization URL\n",
    "auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent')\n",
    "\n",
    "# Output the authorization URL\n",
    "print(f'Please go to this URL: {auth_url}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 428
    },
    "id": "GkBpgWfp2gto",
    "outputId": "7bea02bd-6a1c-4f38-8ee9-18508ebdbae2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please go to this URL: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=312029262535-5986rptnn28n07kglplloiio9lmtjcqm.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&state=XbjZ5wRKPdd6NccQHBIOwYvHXfoApF&access_type=offline&prompt=consent\n",
      "Enter the authorization code: googleddd56fd9a380e567.html\n"
     ]
    },
    {
     "ename": "InsecureTransportError",
     "evalue": "(insecure_transport) OAuth 2 MUST utilize https.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInsecureTransportError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-5-632978e6f00d>\u001b[0m in \u001b[0;36m<cell line: 21>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;31m# Use the code to fetch the credentials\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mcreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauthorization_response\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;31m# Save the credentials to a file so you don't need to authenticate again next time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google_auth_oauthlib/flow.py\u001b[0m in \u001b[0;36mfetch_token\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    283\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"client_secret\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient_config\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"client_secret\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code_verifier\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode_verifier\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moauth2session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient_config\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"token_uri\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests_oauthlib/oauth2_session.py\u001b[0m in \u001b[0;36mfetch_token\u001b[0;34m(self, token_url, code, authorization_response, body, auth, username, password, method, force_querystring, timeout, headers, verify, proxies, include_client_id, client_secret, cert, **kwargs)\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mauthorization_response\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m             self._client.parse_request_uri_response(\n\u001b[0m\u001b[1;32m    245\u001b[0m                 \u001b[0mauthorization_response\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m             )\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/oauthlib/oauth2/rfc6749/clients/web_application.py\u001b[0m in \u001b[0;36mparse_request_uri_response\u001b[0;34m(self, uri, state)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0moauthlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moauth2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrfc6749\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMismatchingStateError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \"\"\"\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_authorization_code_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopulate_code_attributes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/oauthlib/oauth2/rfc6749/parameters.py\u001b[0m in \u001b[0;36mparse_authorization_code_response\u001b[0;34m(uri, state)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_secure_transport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mInsecureTransportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0mquery\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murlparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInsecureTransportError\u001b[0m: (insecure_transport) OAuth 2 MUST utilize https."
     ]
    }
   ],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Generate the authorization URL\n",
    "auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent')\n",
    "\n",
    "# Output the authorization URL\n",
    "print(f'Please go to this URL: {auth_url}')\n",
    "\n",
    "# Once the user authorizes the app, they'll get a code\n",
    "code = input('Enter the authorization code: ')\n",
    "\n",
    "# Use the code to fetch the credentials\n",
    "creds = flow.fetch_token(authorization_response=code)\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API\n",
    "print(\"Authentication successful!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 408
    },
    "id": "oQEb9zZAI7K4",
    "outputId": "e3b8c86e-71b3-4d7b-985c-2fe1b33d017e"
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "oauthlib.oauth2.rfc6749.clients.web_application.WebApplicationClient.prepare_request_uri() got multiple values for keyword argument 'redirect_uri'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-00edd1f0beca>\u001b[0m in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# **Specify redirect_uri with HTTPS:**\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent',\n\u001b[0m\u001b[1;32m     13\u001b[0m                                      redirect_uri='https://localhost:8080')  # Replace with your actual redirect URI\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google_auth_oauthlib/flow.py\u001b[0m in \u001b[0;36mauthorization_url\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    252\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code_challenge\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcode_challenge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    253\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code_challenge_method\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"S256\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 254\u001b[0;31m         url, state = self.oauth2session.authorization_url(\n\u001b[0m\u001b[1;32m    255\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient_config\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"auth_uri\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    256\u001b[0m         )\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests_oauthlib/oauth2_session.py\u001b[0m in \u001b[0;36mauthorization_url\u001b[0;34m(self, url, state, **kwargs)\u001b[0m\n\u001b[1;32m    163\u001b[0m         \u001b[0mstate\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstate\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnew_state\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m         return (\n\u001b[0;32m--> 165\u001b[0;31m             self._client.prepare_request_uri(\n\u001b[0m\u001b[1;32m    166\u001b[0m                 \u001b[0murl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m                 \u001b[0mredirect_uri\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mredirect_uri\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: oauthlib.oauth2.rfc6749.clients.web_application.WebApplicationClient.prepare_request_uri() got multiple values for keyword argument 'redirect_uri'"
     ]
    }
   ],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# **Specify redirect_uri with HTTPS:**\n",
    "auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent',\n",
    "                                     redirect_uri='https://localhost:8080')  # Replace with your actual redirect URI\n",
    "\n",
    "# Output the authorization URL\n",
    "print(f'Please go to this URL: {auth_url}')\n",
    "\n",
    "# Once the user authorizes the app, they'll get a code\n",
    "code = input('Enter the authorization code: ')\n",
    "\n",
    "# Use the code to fetch the credentials\n",
    "creds = flow.fetch_token(authorization_response=code)\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API\n",
    "print(\"Authentication successful!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 428
    },
    "id": "6nfJ-hTaJG_n",
    "outputId": "2b58459f-58b0-4184-aef6-a61579835846"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please go to this URL: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=312029262535-5986rptnn28n07kglplloiio9lmtjcqm.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcalendar.readonly&state=031XFeFFrhfGTnscXiZlZyC4dbebEf&access_type=offline&prompt=consent\n",
      "Enter the authorization code: googleddd56fd9a380e567.html\n"
     ]
    },
    {
     "ename": "InsecureTransportError",
     "evalue": "(insecure_transport) OAuth 2 MUST utilize https.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInsecureTransportError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-dcdbf4cac4eb>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# Use the code to fetch the credentials\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mcreds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauthorization_response\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;31m# Save the credentials to a file so you don't need to authenticate again next time\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google_auth_oauthlib/flow.py\u001b[0m in \u001b[0;36mfetch_token\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    283\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"client_secret\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient_config\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"client_secret\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"code_verifier\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcode_verifier\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moauth2session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch_token\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclient_config\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"token_uri\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/requests_oauthlib/oauth2_session.py\u001b[0m in \u001b[0;36mfetch_token\u001b[0;34m(self, token_url, code, authorization_response, body, auth, username, password, method, force_querystring, timeout, headers, verify, proxies, include_client_id, client_secret, cert, **kwargs)\u001b[0m\n\u001b[1;32m    242\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mcode\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mauthorization_response\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 244\u001b[0;31m             self._client.parse_request_uri_response(\n\u001b[0m\u001b[1;32m    245\u001b[0m                 \u001b[0mauthorization_response\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m             )\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/oauthlib/oauth2/rfc6749/clients/web_application.py\u001b[0m in \u001b[0;36mparse_request_uri_response\u001b[0;34m(self, uri, state)\u001b[0m\n\u001b[1;32m    218\u001b[0m             \u001b[0moauthlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moauth2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrfc6749\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMismatchingStateError\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m         \"\"\"\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparse_authorization_code_response\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpopulate_code_attributes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    222\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/oauthlib/oauth2/rfc6749/parameters.py\u001b[0m in \u001b[0;36mparse_authorization_code_response\u001b[0;34m(uri, state)\u001b[0m\n\u001b[1;32m    270\u001b[0m     \"\"\"\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_secure_transport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 272\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mInsecureTransportError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    273\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m     \u001b[0mquery\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0murlparse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0murlparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muri\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInsecureTransportError\u001b[0m: (insecure_transport) OAuth 2 MUST utilize https."
     ]
    }
   ],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# **Remove or comment out redirect_uri from this line:**\n",
    "auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent')\n",
    "                                     #redirect_uri='https://localhost:8080')  # This may be already in client_secrets.json\n",
    "\n",
    "# Output the authorization URL\n",
    "print(f'Please go to this URL: {auth_url}')\n",
    "\n",
    "# Once the user authorizes the app, they'll get a code\n",
    "code = input('Enter the authorization code: ')\n",
    "\n",
    "# Use the code to fetch the credentials\n",
    "creds = flow.fetch_token(authorization_response=code)\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API\n",
    "print(\"Authentication successful!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "zyf76q7p3A9x"
   },
   "outputs": [],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Generate the authorization URL\n",
    "auth_url, _ = flow.authorization_url(access_type='offline', prompt='consent')\n",
    "\n",
    "# Output the authorization URL\n",
    "print(f'Please go to this URL: {auth_url}')\n",
    "\n",
    "# Once the user authorizes the app, they'll get a code\n",
    "code = input('Enter the authorization code: ')\n",
    "\n",
    "# Use the code to fetch the credentials\n",
    "creds = flow.fetch_token(authorization_response=code)\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Now you can use the 'creds' to access the Google Calendar API\n",
    "print(\"Authentication successful!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "SFEDLTyH9VaW"
   },
   "outputs": [],
   "source": [
    "from google_auth_oauthlib.flow import InstalledAppFlow\n",
    "import os\n",
    "\n",
    "# Define the SCOPES you need (e.g., for Google Calendar API)\n",
    "SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']  # Adjust the scope to your needs\n",
    "\n",
    "# Load the credentials from the uploaded client_secrets.json\n",
    "flow = InstalledAppFlow.from_client_secrets_file(\n",
    "    'client_secrets.json', SCOPES)\n",
    "\n",
    "# Run the OAuth 2.0 authentication flow (this should prompt you to log in)\n",
    "creds = flow.run_local_server(port=0)  # For testing in a local environment (in Colab, this should work with the proper setup)\n",
    "\n",
    "# Save the credentials to a file so you don't need to authenticate again next time\n",
    "with open('token.json', 'w') as token:\n",
    "    token.write(creds.to_json())\n",
    "\n",
    "# Print success message\n",
    "print(\"Authentication successful!\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "PHj3px8G9d7k"
   },
   "outputs": [],
   "source": [
    "from googleapiclient.discovery import build\n",
    "\n",
    "# Build the service object for the Google Calendar API\n",
    "service = build('calendar', 'v3', credentials=creds)\n",
    "\n",
    "# Call the Calendar API to get events\n",
    "events_result = service.events().list(calendarId='primary', timeMin='2024-01-01T00:00:00Z', maxResults=10, singleEvents=True, orderBy='startTime').execute()\n",
    "events = events_result.get('items', [])\n",
    "\n",
    "if not events:\n",
    "    print('No upcoming events found.')\n",
    "for event in events:\n",
    "    print(f'{event[\"summary\"]} ({event[\"start\"][\"dateTime\"]})')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "j61lxZwE9t25"
   },
   "outputs": [],
   "source": [
    "!pip install --upgrade google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
